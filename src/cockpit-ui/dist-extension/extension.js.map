{"version":3,"sources":["../../extension.ts","../../providers/hoverProvider.ts","../../providers/codeLensProvider.ts","../../utils/index.ts","../../providers/testCodeDecoProvider.ts","../../controllers/forgeProjectController.ts","../../providers/taskProvider.ts","../../providers/testParserProvider.ts","../../providers/forgeTestProvider.ts","../../panels/forgeCockPitPanel.ts","../../providers/cockpitActionsProvider.ts","../../items/cockPitItem.ts","../../providers/abiProvider.ts","../../providers/stubTestProvider.ts","../../providers/walletProvider.ts","../../providers/logProvider.ts"],"sourcesContent":["import * as vscode from \"vscode\";\nimport * as dotenv from \"dotenv\";\nimport * as path from \"path\";\nimport { TestHoverProvider } from \"./providers/hoverProvider\";\nimport { TestCodeLensProvider } from \"./providers/codeLensProvider\";\nimport { TestDecorationProvider } from \"./providers/testCodeDecoProvider\";\nimport { FoundryProjectController } from \"./controllers/forgeProjectController\";\nimport {\n\tAbiInputData,\n\tDeployContract,\n\tDeployedContract,\n\tForkInfo,\n\tFunctionCall,\n\tScriptResponse,\n\tSingleTest,\n\tTestFile,\n\tTransferTransaction,\n\tWalletBalancesInfo,\n} from \"./types\";\nimport { TestParserProvider } from \"./providers/testParserProvider\";\nimport { ForgeTestProvider } from \"./providers/forgeTestProvider\";\nimport { ForgeCockPitPanel } from \"./panels/forgeCockPitPanel\";\nimport { CockPitActionsProvider } from \"./providers/cockpitActionsProvider\";\nimport { AbiProvider } from \"./providers/abiProvider\";\nimport { StubTestProvider } from \"./providers/stubTestProvider\";\nimport { WalletProvider } from \"./providers/walletProvider\";\nimport { CockPitLogProvider } from \"./providers/logProvider\";\nimport { ACTIVE_NODE_KEY, ForgeCockpitCommand, WebviewCommand } from \"./utils\";\ndotenv.config({ path: path.join(__dirname, \"..\", \".env\") });\n\nexport async function activate(context: vscode.ExtensionContext) {\n\tconst logger = new CockPitLogProvider();\n\tconst foundryProjectController: FoundryProjectController = new FoundryProjectController(logger);\n\tawait foundryProjectController.initialize();\n\n\tif (foundryProjectController.isFoundry()) {\n\t\tconst testParserProvider = new TestParserProvider(foundryProjectController.getConfig(), logger);\n\t\tconst abiProvider = new AbiProvider(foundryProjectController, logger);\n\t\tabiProvider.initialize();\n\t\tawait testParserProvider.initialize();\n\t\tconst testingProvider = new ForgeTestProvider(\n\t\t\ttestParserProvider.contracts,\n\t\t\ttestParserProvider.onDidChangeContracts,\n\t\t\tfoundryProjectController,\n\t\t\tlogger\n\t\t);\n\n\t\tconst hoverProvider = new TestHoverProvider(foundryProjectController);\n\t\tconst codeLensProvider = new TestCodeLensProvider(foundryProjectController);\n\t\tconst decorationProvider = new TestDecorationProvider();\n\t\tconst actionsProvider = new CockPitActionsProvider();\n\t\tconst actionsTreeView = vscode.window.createTreeView(\"forgeCockpitActions\", {\n\t\t\ttreeDataProvider: actionsProvider,\n\t\t\tshowCollapseAll: false,\n\t\t});\n\n\t\tcontext.subscriptions.push(\n\t\t\tvscode.commands.registerCommand(\n\t\t\t\tForgeCockpitCommand.StubForgeTestsCommand,\n\t\t\t\tasync (contract: TestFile): Promise<void> => {\n\t\t\t\t\tconst contractName = contract.fileName.replace(/\\.sol$/, \"\");\n\t\t\t\t\tconst abi = abiProvider.abis.find(a => a.fileName === contract.fileName)?.abi;\n\n\t\t\t\t\tif (!abi) {\n\t\t\t\t\t\tvscode.window.showErrorMessage(`ABI not found for ${abiProvider.abis.length} ABIs`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst stubTestProvider = new StubTestProvider(contractName, abi, logger);\n\n\t\t\t\t\tawait stubTestProvider.generateTestFile(contract.filePath);\n\t\t\t\t}\n\t\t\t),\n\t\t\tvscode.commands.registerCommand(ForgeCockpitCommand.ShowForgeCockPitCommand, (): void => {\n\t\t\t\tinitWebView(context);\n\t\t\t\tvscode.commands.executeCommand(ForgeCockpitCommand.PinEditorCommand);\n\t\t\t\tvscode.commands.executeCommand(ForgeCockpitCommand.LoadCockPitWalletsCommand);\n\t\t\t}),\n\t\t\tvscode.commands.registerCommand(ForgeCockpitCommand.RebuildProjectCommand, (): void => {\n\t\t\t\tfoundryProjectController.triggerBuild();\n\t\t\t}),\n\t\t\tvscode.languages.registerCodeLensProvider(\n\t\t\t\t{ language: \"solidity\", pattern: \"**/*.sol\" },\n\t\t\t\tcodeLensProvider\n\t\t\t),\n\t\t\tvscode.languages.registerHoverProvider(\n\t\t\t\t{ language: \"solidity\", pattern: \"**/*.sol\" },\n\t\t\t\thoverProvider\n\t\t\t),\n\t\t\tvscode.commands.registerCommand(\n\t\t\t\tForgeCockpitCommand.RunTestCommand,\n\t\t\t\t(contract: SingleTest): void => {\n\t\t\t\t\ttestingProvider.runTest(contract);\n\t\t\t\t}\n\t\t\t),\n\t\t\tvscode.commands.registerCommand(\n\t\t\t\tForgeCockpitCommand.RunTestViaIRCommand,\n\t\t\t\t(contract: SingleTest): void => {\n\t\t\t\t\ttestingProvider.runTestViaIR(contract);\n\t\t\t\t}\n\t\t\t),\n\t\t\tvscode.commands.registerCommand(ForgeCockpitCommand.RunGroupCommand, (path: string): void => {\n\t\t\t\ttestingProvider.runGroup(path);\n\t\t\t}),\n\t\t\tvscode.commands.registerCommand(\n\t\t\t\tForgeCockpitCommand.RefreshTestsCommand,\n\t\t\t\tasync (): Promise<void> => {\n\t\t\t\t\tawait testingProvider.refreshTests();\n\t\t\t\t\tForgeCockPitPanel.sendContracts(abiProvider.abis);\n\t\t\t\t}\n\t\t\t),\n\t\t\tvscode.commands.registerCommand(\n\t\t\t\tForgeCockpitCommand.ForkNodeCommand,\n\t\t\t\tasync (forkDetails: ForkInfo): Promise<any> => {\n\t\t\t\t\tconst [node, cachedNodes] = await Promise.all([\n\t\t\t\t\t\tfoundryProjectController.forkNode(forkDetails),\n\t\t\t\t\t\tcontext.globalState.get<string[]>(ACTIVE_NODE_KEY),\n\t\t\t\t\t]);\n\n\t\t\t\t\tif (node.success) {\n\t\t\t\t\t\tconst newNodeUrl = `http://localhost:${node.port}`;\n\t\t\t\t\t\tconst existingNodes = Array.isArray(cachedNodes) ? cachedNodes : [];\n\t\t\t\t\t\tconst updatedNodes = [...existingNodes, newNodeUrl];\n\t\t\t\t\t\tawait context.globalState.update(ACTIVE_NODE_KEY, updatedNodes);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn node;\n\t\t\t\t}\n\t\t\t),\n\t\t\tvscode.commands.registerCommand(\n\t\t\t\tForgeCockpitCommand.WalletBalancesCommand,\n\t\t\t\tasync (info: WalletBalancesInfo): Promise<any> => {\n\t\t\t\t\tconst walletProvider = new WalletProvider(info.nodeUrl, logger);\n\t\t\t\t\treturn await walletProvider.getBalances(info.wallets);\n\t\t\t\t}\n\t\t\t),\n\t\t\tvscode.commands.registerCommand(\n\t\t\t\tForgeCockpitCommand.LoadCockPitWalletsCommand,\n\t\t\t\tasync (): Promise<any> => {\n\t\t\t\t\tconst wallets = await foundryProjectController.loadWallets();\n\t\t\t\t\tForgeCockPitPanel.sendDefaultWallets(WebviewCommand.LoadCockpitWallets, wallets);\n\t\t\t\t}\n\t\t\t),\n\t\t\tvscode.commands.registerCommand(\n\t\t\t\tForgeCockpitCommand.ExecuteFunctionCommand,\n\t\t\t\tasync (callInfo: FunctionCall): Promise<any> => {\n\t\t\t\t\tconst walletProvider = new WalletProvider(callInfo.nodeUrl, logger);\n\n\t\t\t\t\t// We need to append the full abi to the callInfo\n\t\t\t\t\t// to be able to get any events emitted\n\t\t\t\t\tconst abi = abiProvider.abis.find(a => a.fileName === callInfo.contractAddress)?.abi;\n\n\t\t\t\t\treturn await walletProvider.executeFunction({\n\t\t\t\t\t\t...callInfo,\n\t\t\t\t\t\tabi: abi ?? callInfo.abi,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t),\n\t\t\tvscode.commands.registerCommand(\n\t\t\t\tForgeCockpitCommand.StopNodeCommand,\n\t\t\t\tasync (port: string): Promise<boolean> => {\n\t\t\t\t\tconst success = await foundryProjectController.stopForkNode(port);\n\t\t\t\t\tconst cachedNodes = context.globalState.get<string[]>(ACTIVE_NODE_KEY);\n\n\t\t\t\t\tif (success && cachedNodes) {\n\t\t\t\t\t\tconst newNodes = cachedNodes?.filter(url => !url.includes(port));\n\t\t\t\t\t\tawait context.globalState.update(ACTIVE_NODE_KEY, newNodes);\n\t\t\t\t\t\t// we dont execute these in parallel due to the dependence on\n\t\t\t\t\t\t// the state being updated before we get active ndoes\n\t\t\t\t\t\tForgeCockPitPanel.sendActiveNodes(WebviewCommand.GetActiveNodesCommand);\n\t\t\t\t\t}\n\t\t\t\t\treturn success;\n\t\t\t\t}\n\t\t\t),\n\t\t\tvscode.commands.registerCommand(\n\t\t\t\tForgeCockpitCommand.DeployContractCommand,\n\t\t\t\tasync (config: DeployContract): Promise<any> => {\n\t\t\t\t\tconst walletProvider = new WalletProvider(config.nodeUrl, logger);\n\t\t\t\t\treturn await walletProvider.deployContract(config);\n\t\t\t\t}\n\t\t\t),\n\t\t\tvscode.commands.registerCommand(\n\t\t\t\tForgeCockpitCommand.TransferCommand,\n\t\t\t\tasync (info: TransferTransaction): Promise<any> => {\n\t\t\t\t\tconst walletProvider = new WalletProvider(info.nodeUrl, logger);\n\t\t\t\t\treturn await walletProvider.transfer(info);\n\t\t\t\t}\n\t\t\t),\n\t\t\tvscode.commands.registerCommand(\n\t\t\t\tForgeCockpitCommand.GetActiveNodesCommand,\n\t\t\t\tasync (): Promise<any> => {\n\t\t\t\t\tconst nodes = await foundryProjectController.getActiveNodes();\n\t\t\t\t\tconst cachedNodes = (await context.globalState.get(ACTIVE_NODE_KEY)) as string[];\n\n\t\t\t\t\tconst anvilNodeChecks = await Promise.all(\n\t\t\t\t\t\tcachedNodes.map(async nodeUrl => {\n\t\t\t\t\t\t\tconst walletProvider = new WalletProvider(nodeUrl, logger);\n\t\t\t\t\t\t\tconst isAnvil = await walletProvider.isAnvilNode();\n\t\t\t\t\t\t\treturn isAnvil ? nodeUrl.split(\":\")[2] : null;\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\n\t\t\t\t\tconst anvilNodes = anvilNodeChecks.filter(\n\t\t\t\t\t\t(nodeUrl): nodeUrl is string => nodeUrl !== null\n\t\t\t\t\t);\n\n\t\t\t\t\tconst allNodes = [...new Set([...nodes, ...anvilNodes])];\n\t\t\t\t\tlogger.logToOutput(`Found ${allNodes} anvil cached nodes`);\n\t\t\t\t\treturn allNodes;\n\t\t\t\t}\n\t\t\t),\n\t\t\tvscode.commands.registerCommand(ForgeCockpitCommand.ShowBuildOutputCommand, (): void => {\n\t\t\t\tlogger.showBuildOutput();\n\t\t\t}),\n\t\t\tvscode.commands.registerCommand(ForgeCockpitCommand.OpenUrlCommand, (url: string): void => {\n\t\t\t\tvscode.commands.executeCommand(ForgeCockpitCommand.VsOpenUrlCommand, vscode.Uri.parse(url));\n\t\t\t}),\n\t\t\tvscode.commands.registerCommand(\n\t\t\t\tForgeCockpitCommand.ClearCacheCommand,\n\t\t\t\tasync (): Promise<void> => {\n\t\t\t\t\tconst cachedNodes = context.globalState.get<string[]>(ACTIVE_NODE_KEY);\n\t\t\t\t\tif (cachedNodes) {\n\t\t\t\t\t\tawait Promise.all([\n\t\t\t\t\t\t\tcachedNodes.map(nodeUrl => {\n\t\t\t\t\t\t\t\tconst port = nodeUrl.split(\":\")[2];\n\t\t\t\t\t\t\t\treturn vscode.commands.executeCommand(ForgeCockpitCommand.StopNodeCommand, port);\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\t\t\t\t\tawait context.globalState.update(ACTIVE_NODE_KEY, []);\n\t\t\t\t\tForgeCockPitPanel.sendActiveNodes(WebviewCommand.GetActiveNodesCommand);\n\t\t\t\t\tlogger.logToOutput(\"Cleared Cache\");\n\t\t\t\t}\n\t\t\t),\n\t\t\tvscode.commands.registerCommand(\n\t\t\t\tForgeCockpitCommand.RunScriptCommand,\n\t\t\t\tasync (config: DeployContract): Promise<any> => {\n\t\t\t\t\tconst walletProvider = new WalletProvider(config.nodeUrl, logger);\n\t\t\t\t\tconst chainId = await walletProvider.chainId();\n\t\t\t\t\tconst contract = abiProvider.abis.find(\n\t\t\t\t\t\tcontract => contract.fileName === config.contractName\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!contract) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\tcontracts: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcontractName: config.contractName,\n\t\t\t\t\t\t\t\t\taddress: \"\",\n\t\t\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\t\t\thash: \"\",\n\t\t\t\t\t\t\t\t\tnodeUrl: config.nodeUrl,\n\t\t\t\t\t\t\t\t\tlogs: undefined,\n\t\t\t\t\t\t\t\t} as DeployedContract,\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tscriptName: config.contractName,\n\t\t\t\t\t\t} as ScriptResponse;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn await foundryProjectController.runScript({\n\t\t\t\t\t\t...config,\n\t\t\t\t\t\tchainId,\n\t\t\t\t\t\tscriptName: contract.solFileName,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\n\t\tcontext.subscriptions.push(\n\t\t\tactionsTreeView,\n\t\t\t{ dispose: () => decorationProvider.dispose() },\n\t\t\t{ dispose: () => testParserProvider.dispose() },\n\t\t\t{ dispose: () => testingProvider.dispose() }\n\t\t);\n\n\t\tvscode.window.showInformationMessage(`Forge Cockpit activated!`);\n\t}\n\n\tfunction initWebView(context: vscode.ExtensionContext): void {\n\t\tForgeCockPitPanel.render(context);\n\t}\n}\n","import * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport { FoundryProjectController } from \"../controllers/forgeProjectController\";\nimport { SingleTest } from \"../types\";\n\nexport class TestHoverProvider implements vscode.HoverProvider {\n\tconstructor(private foundryManager: FoundryProjectController) {}\n\n\tasync provideHover(\n\t\tdocument: vscode.TextDocument,\n\t\tposition: vscode.Position\n\t): Promise<vscode.Hover | null> {\n\t\tif (!document.fileName.match(/[tT]\\.sol$/)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst wordRange = document.getWordRangeAtPosition(position);\n\t\tif (!wordRange) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst word = document.getText(wordRange);\n\n\t\tif (!word.startsWith(\"test\")) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst lineText = document.lineAt(position.line).text;\n\t\tif (!lineText.includes(\"function\")) {\n\t\t\treturn null;\n\t\t}\n\t\tconst fileName = path.basename(document.fileName);\n\n\t\tconst runTestCommand = vscode.Uri.parse(\n\t\t\t`command:forge-cockpit.runTest?${encodeURIComponent(\n\t\t\t\tJSON.stringify({\n\t\t\t\t\tcontractName: fileName,\n\t\t\t\t\ttestName: word,\n\t\t\t\t} as SingleTest)\n\t\t\t)}`\n\t\t);\n\t\tconst runTestCommandViaIR = vscode.Uri.parse(\n\t\t\t`command:forge-cockpit.runTestViaIR?${encodeURIComponent(\n\t\t\t\tJSON.stringify({\n\t\t\t\t\tcontractName: fileName,\n\t\t\t\t\ttestName: word,\n\t\t\t\t} as SingleTest)\n\t\t\t)}`\n\t\t);\n\t\tconst hoverContent = new vscode.MarkdownString(\n\t\t\t`**Forge Test**: \\`${word}\\`\\n\\n` +\n\t\t\t\t`[Run Test](${runTestCommand}) | [Run Test via IR](${runTestCommandViaIR})`\n\t\t);\n\n\t\thoverContent.isTrusted = true;\n\n\t\treturn new vscode.Hover(hoverContent, wordRange);\n\t}\n}\n","import * as vscode from \"vscode\";\nimport { FoundryProjectController } from \"../controllers/forgeProjectController\";\nimport { DeployContract, SingleTest, TestFile } from \"../types\";\nimport { ForgeCockpitCommand } from \"../utils\";\n\nexport class TestCodeLensProvider implements vscode.CodeLensProvider {\n\tconstructor(private foundryManager: FoundryProjectController) {}\n\n\tasync provideCodeLenses(\n\t\tdocument: vscode.TextDocument,\n\t\ttoken: vscode.CancellationToken\n\t): Promise<vscode.CodeLens[]> {\n\t\tconst codeLenses: vscode.CodeLens[] = [];\n\t\tconst text = document.getText();\n\t\tconst relativePath = vscode.workspace.asRelativePath(document.fileName);\n\t\tthis.addTestFunctionLenses(document, text, relativePath, codeLenses);\n\t\tthis.addContractLenses(document, text, relativePath, codeLenses);\n\n\t\treturn codeLenses;\n\t}\n\n\tprivate addTestFunctionLenses(\n\t\tdocument: vscode.TextDocument,\n\t\ttext: string,\n\t\trelativePath: string,\n\t\tcodeLenses: vscode.CodeLens[]\n\t): void {\n\t\tif (this.isNotTestOrScriptFile(relativePath)) {\n\t\t\treturn;\n\t\t}\n\t\tconst functionRegex = /function\\s+(test\\w+)\\s*\\(/g;\n\t\tlet match;\n\n\t\twhile ((match = functionRegex.exec(text)) !== null) {\n\t\t\tconst functionName = match[1];\n\t\t\tconst position = document.positionAt(match.index);\n\t\t\tconst range = new vscode.Range(\n\t\t\t\tposition,\n\t\t\t\tposition.with(undefined, position.character + match[0].length)\n\t\t\t);\n\n\t\t\tconst runTestCmd = {\n\t\t\t\ttitle: \"forge test\",\n\t\t\t\tcommand: ForgeCockpitCommand.RunTestCommand,\n\t\t\t\targuments: [\n\t\t\t\t\t{\n\t\t\t\t\t\tcontractName: relativePath,\n\t\t\t\t\t\ttestName: functionName,\n\t\t\t\t\t} as SingleTest,\n\t\t\t\t],\n\t\t\t};\n\n\t\t\tconst runTestViaIRCmd = {\n\t\t\t\ttitle: \"forge test viaIR\",\n\t\t\t\tcommand: ForgeCockpitCommand.RunTestViaIRCommand,\n\t\t\t\targuments: [\n\t\t\t\t\t{\n\t\t\t\t\t\tcontractName: relativePath,\n\t\t\t\t\t\ttestName: functionName,\n\t\t\t\t\t\tviaIR: true,\n\t\t\t\t\t} as SingleTest,\n\t\t\t\t],\n\t\t\t};\n\n\t\t\tcodeLenses.push(new vscode.CodeLens(range, runTestCmd));\n\t\t\tcodeLenses.push(new vscode.CodeLens(range, runTestViaIRCmd));\n\t\t}\n\t}\n\n\tprivate addContractLenses(\n\t\tdocument: vscode.TextDocument,\n\t\ttext: string,\n\t\trelativePath: string,\n\t\tcodeLenses: vscode.CodeLens[]\n\t): void {\n\t\tif (!this.isNotTestOrScriptFile(relativePath)) {\n\t\t\treturn;\n\t\t}\n\t\tconst contractRegex = /contract\\s+(\\w+)(?:\\s+is\\s+|\\s*\\{)/g;\n\t\tlet match;\n\n\t\twhile ((match = contractRegex.exec(text)) !== null) {\n\t\t\tconst contractName = match[1];\n\t\t\tconst position = document.positionAt(match.index);\n\t\t\tconst range = new vscode.Range(\n\t\t\t\tposition,\n\t\t\t\tposition.with(undefined, position.character + match[0].length - 1)\n\t\t\t);\n\n\t\t\tconst generateTestsCmd = {\n\t\t\t\ttitle: \"Forge stub tests\",\n\t\t\t\tcommand: ForgeCockpitCommand.StubForgeTestsCommand,\n\t\t\t\targuments: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfileName: contractName,\n\t\t\t\t\t\tfilePath: relativePath,\n\t\t\t\t\t} as TestFile,\n\t\t\t\t],\n\t\t\t};\n\n\t\t\tcodeLenses.push(new vscode.CodeLens(range, generateTestsCmd));\n\t\t}\n\t}\n\n\tprivate isNotTestOrScriptFile(fileName: string): boolean {\n\t\treturn /^(?!.*\\.(t|s)\\.sol).*$/.test(fileName);\n\t}\n\n\tprivate isScriptFile(fileName: string): boolean {\n\t\treturn /\\.s\\.sol$/.test(fileName);\n\t}\n}\n","import { encodeFunctionData } from \"viem\";\nimport { AbiInputData, Account, EncodeResponse } from \"../types\";\nimport * as vscode from \"vscode\";\n\nexport const ALREADY_PINNED_KEY = \"FORGE_COCKPIT_ALREADY_PINNED\";\nexport const ACTIVE_NODE_KEY = \"FORGE_COCKPIT_ACTIVE_NODES\";\n\nexport const ForgeCockpitCommand = {\n\tTransferCommand: \"forge-cockpit.transfer\",\n\tLoadCockPitWalletsCommand: \"forge-cockpit.loadWallets\",\n\tStubForgeTestsCommand: \"forge-cockpit.stubForgeTests\",\n\tShowForgeCockPitCommand: \"cockpit.showForgeCockPit\",\n\tRebuildProjectCommand: \"forge-cockpit.rebuildProject\",\n\tRunTestCommand: \"forge-cockpit.runTest\",\n\tRunTestViaIRCommand: \"forge-cockpit.runTestViaIR\",\n\tRunGroupCommand: \"forge-cockpit.runGroup\",\n\tRefreshTestsCommand: \"forge-cockpit.refreshTests\",\n\tAbiEncodeCommand: \"forge-cockpit.abiEncode\",\n\tForkNodeCommand: \"forge-cockpit.forkNode\",\n\tWalletBalancesCommand: \"forge-cockpit.walletBalances\",\n\tExecuteFunctionCommand: \"forge-cockpit.executeFunction\",\n\tStopNodeCommand: \"forge-cockpit.stopNode\",\n\tDeployContractCommand: \"forge-cockpit.deployContract\",\n\tGetActiveNodesCommand: \"forge-cockpit.getActiveNodes\",\n\tShowBuildOutputCommand: \"forge-cockpit.showBuildOutput\",\n\tPinEditorCommand: \"workbench.action.pinEditor\",\n\tRunScriptCommand: \"forge-cockpit.runScript\",\n\tClearCacheCommand: \"forge-cockpit.clearCache\",\n\tTerminateAllTasksCommand: \"workbench.action.tasks.terminate\",\n\tOpenUrlCommand: \"forge-cockpit.openUrl\",\n\tVsOpenUrlCommand: \"vscode.open\",\n} as const;\n\nexport const WebviewCommand = {\n\tLoadCockpitWallets: \"loadWallets\",\n\tOpenLinkCommand: \"openLink\",\n\tGetActiveNodesCommand: \"getActiveNodes\",\n\tStopNodeCommand: \"stopNode\",\n\tDeployContractCommand: \"deployContract\",\n\tWalletBalancesCommand: \"walletBalances\",\n\tExecuteFunctionCommand: \"executeFunction\",\n\tWriteClipboardCommand: \"writeClipboard\",\n\tRefreshContractsCommand: \"refreshContracts\",\n\tLoadContractsCommand: \"loadContracts\",\n\tForkNodeCommand: \"forkNode\",\n\tRunScriptCommand: \"runScript\",\n\tAbiEncodeCommand: \"abiEncode\",\n\tTransferCommand: \"transfer\",\n\tTokenInfoCommand: \"tokenInfo\",\n} as const;\n\nexport const ClipBoardTypeCommand = {\n\tReadWalletImportCommand: \"readClipboard:walletImport\",\n\tReadTransferCommand: \"readClipboard:transfer\",\n\tReadClipboardWalletCommand: \"readClipboard:wallet\",\n\tReadClipboardDeploymentCommand: \"readClipboard:deployment\",\n\tReadClipboardAnvilCommand: \"readClipboard:anvil\",\n\tReadClipboardConstructorArgsCommand: \"readClipboard:constructorArgs\",\n\tReadClipboardFunctionInputCommand: \"readClipboard:functionInput\",\n\tReadClipboardEncoderCommand: \"readClipboardEncoder\",\n\tReadClipboard: \"readClipboard\",\n} as const;\n\nexport const ForgeCockPitResponseCommand = {\n\tGetDefaultWalletsResponse: \"getDefaultWalletResponse\",\n\tGetActiveNodesResponse: \"getActiveNodesResponse\",\n\tDeployContractResponse: \"deployContractResponse\",\n\tWalletBalancesResponse: \"walletBalancesResponse\",\n\tExecuteFunctionResponse: \"executeFunctionResponse\",\n\tClipboardContentResponse: \"clipboardContentResponse\",\n\tForkNodeResultsResponse: \"forkNodeResultsResponse\",\n\tSetContractsResponse: \"setContractsResponse\",\n\tRunScriptResponse: \"setRunScriptResponse\",\n\tStopNodeResponse: \"stopNodeResponse\",\n\tAbiEncodeResponse: \"abiEncodeResponse\",\n\tTransferResponse: \"transferResponse\",\n\tTokenInfoResponse: \"tokenInfoResponse\",\n} as const;\n\nexport const COCKPIT_HTML = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Forge Cockpit</title>\n    <style>\n        :root {\n            --background-color: #1e1e1e;\n            --foreground-color: #d4d4d4;\n            --accent-color: #3794ff;\n            --card-background: #252526;\n            --card-border: #3794ff;\n            --section-background: #333333;\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n            background-color: var(--background-color);\n            color: var(--foreground-color);\n            margin: 0;\n            padding: 20px;\n            line-height: 1.6;\n        }\n\n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n\n        header {\n            display: flex;\n            align-items: center;\n            margin-bottom: 30px;\n            border-bottom: 1px solid #444;\n            padding-bottom: 20px;\n        }\n\n        header h1 {\n            margin: 0;\n            color: var(--accent-color);\n            font-size: 28px;\n        }\n\n        .logo {\n            width: 40px;\n            height: 40px;\n            margin-right: 15px;\n            background-color: var(--accent-color);\n            border-radius: 8px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n            color: #fff;\n        }\n\n        .card {\n            background-color: var(--card-background);\n            border-radius: 6px;\n            padding: 20px;\n            margin-bottom: 20px;\n            border-left: 4px solid var(--card-border);\n        }\n\n        .card h2 {\n            margin-top: 0;\n            color: var(--accent-color);\n            font-size: 20px;\n        }\n\n        .placeholder {\n            background-color: var(--section-background);\n            border-radius: 4px;\n            padding: 30px 20px;\n            text-align: center;\n            color: #888;\n            margin: 15px 0;\n        }\n\n        .grid {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n        }\n\n        @media (max-width: 768px) {\n            .grid {\n                grid-template-columns: 1fr;\n            }\n        }\n\n        .status {\n            font-size: 14px;\n            color: #888;\n            margin-top: 20px;\n            text-align: center;\n        }\n\n        .button {\n            background-color: var(--accent-color);\n            color: white;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 14px;\n            margin-right: 8px;\n        }\n\n        .button:hover {\n            opacity: 0.9;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <div class=\"logo\">FC</div>\n            <h1>Forge Cockpit</h1>\n        </header>\n\n        <div class=\"grid\">\n            <div class=\"card\">\n                <h2>Test Explorer</h2>\n                <p>Run and monitor your Foundry tests from this interface.</p>\n                <div class=\"placeholder\">\n                    <p>Vue.js Test Runner Application</p>\n                    <p>This is where your test explorer will be rendered.</p>\n                </div>\n            </div>\n\n            <div class=\"card\">\n                <h2>Contract Information</h2>\n                <p>View detailed information about your smart contracts.</p>\n                <div class=\"placeholder\">\n                    <p>Contract Data Visualization</p>\n                    <p>Contract metrics and insights will appear here.</p>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card\">\n            <h2>Test Results</h2>\n            <p>View the results of your most recent test runs.</p>\n            <div class=\"placeholder\">\n                <p>Test Results Dashboard</p>\n                <p>Detailed test results with gas usage and execution time will be displayed here.</p>\n            </div>\n        </div>\n\n        <div class=\"status\">\n            <p>This is a placeholder interface. The full Vue.js application will be integrated in a future update.</p>\n        </div>\n    </div>\n</body>\n</html>`;\n\nexport function shouldTriggerBuild(key: string): boolean {\n\tconst buildRelatedSettings = [\n\t\t\"forge-cockpit.useViaIr\",\n\t\t\"forge-cockpit.optimizer\",\n\t\t\"forge-cockpit.optimizerRuns\",\n\t\t\"forge-cockpit.foundryPath\",\n\t\t\"forge-cockpit.remappings\",\n\t];\n\n\treturn buildRelatedSettings.includes(key);\n}\n\nexport function safeStringify(obj: any): string {\n\treturn JSON.stringify(obj, (_key, value) =>\n\t\ttypeof value === \"bigint\" ? value.toString() : value\n\t);\n}\n\nexport const DEFAULT_ANVIL_ACCOUNTS = {\n\taccounts: {\n\t\t\"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\":\n\t\t\t\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\",\n\t\t\"0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d\":\n\t\t\t\"0x70997970C51812dc3A010C7d01b50e0d17dc79C8\",\n\t\t\"0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a\":\n\t\t\t\"0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC\",\n\t\t\"0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6\":\n\t\t\t\"0x90F79bf6EB2c4f870365E785982E1f101E93b906\",\n\t\t\"0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a\":\n\t\t\t\"0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65\",\n\t\t\"0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba\":\n\t\t\t\"0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc\",\n\t\t\"0x92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e\":\n\t\t\t\"0x976EA74026E726554dB657fA54763abd0C3a0aa9\",\n\t\t\"0x4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356\":\n\t\t\t\"0x14dC79964da2C08b23698B3D3cc7Ca32193d9955\",\n\t\t\"0xdbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97\":\n\t\t\t\"0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f\",\n\t\t\"0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6\":\n\t\t\t\"0xa0Ee7A142d267C1f36714E4a8F75612F20a79720\",\n\t},\n};\n\nexport function readAccounts(accountsJson: any) {\n\treturn Object.entries(accountsJson).map(([privateKey, publicKey]) => ({\n\t\tprivateKey,\n\t\tpublicKey,\n\t})) as Array<Account>;\n}\n\nexport function encodeFunction(input: AbiInputData): EncodeResponse {\n\ttry {\n\t\tconst data = encodeFunctionData({\n\t\t\tabi: input.abi,\n\t\t\tfunctionName: input.functionName,\n\t\t\targs: input.inputs,\n\t\t});\n\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t\tdata,\n\t\t\terror: \"\",\n\t\t\tfunctionName: input.functionName,\n\t\t} as EncodeResponse;\n\t} catch (error) {\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\tdata: \"0x\",\n\t\t\terror: (error as Error).toString(),\n\t\t\tfunctionName: input.functionName,\n\t\t} as EncodeResponse;\n\t}\n}\n\nexport async function fileExists(uri: vscode.Uri): Promise<boolean> {\n\ttry {\n\t\tawait vscode.workspace.fs.stat(uri);\n\t\treturn true;\n\t} catch (err: any) {\n\t\t// We dont care about the specific error, just that it exists or not\n\t\treturn false;\n\t}\n}\n","import * as vscode from \"vscode\";\n\nexport class TestDecorationProvider {\n\tprivate decorationType: vscode.TextEditorDecorationType;\n\tprivate activeEditor: vscode.TextEditor | undefined;\n\n\tconstructor() {\n\t\tthis.decorationType = vscode.window.createTextEditorDecorationType({\n\t\t\tbefore: {\n\t\t\t\tcontentText: \"\",\n\t\t\t\tcolor: \"#6a9955\",\n\t\t\t\tmargin: \"0 0 0 2.5em\",\n\t\t\t\tfontStyle: \"italic\",\n\t\t\t},\n\t\t\tisWholeLine: true,\n\t\t});\n\n\t\tvscode.window.onDidChangeActiveTextEditor(editor => {\n\t\t\tthis.activeEditor = editor;\n\t\t\tif (editor) {\n\t\t\t\tthis.updateDecorations();\n\t\t\t}\n\t\t});\n\n\t\tvscode.workspace.onDidChangeTextDocument(event => {\n\t\t\tif (this.activeEditor && event.document === this.activeEditor.document) {\n\t\t\t\tthis.updateDecorations();\n\t\t\t}\n\t\t});\n\n\t\tthis.activeEditor = vscode.window.activeTextEditor;\n\t\tif (this.activeEditor) {\n\t\t\tthis.updateDecorations();\n\t\t}\n\t}\n\n\tprivate updateDecorations() {\n\t\tconst document = this.activeEditor?.document;\n\t\tif (\n\t\t\tthis.activeEditor &&\n\t\t\tdocument?.fileName.match(/[tT]\\.sol$/) &&\n\t\t\t!document?.fileName.match(/[tT]\\.s.sol$/)\n\t\t) {\n\t\t\tconst text = document.getText();\n\t\t\tconst decorations: vscode.DecorationOptions[] = [];\n\n\t\t\tconst functionRegex = /function\\s+(test\\w+)\\s*\\(/g;\n\t\t\tlet match;\n\n\t\t\twhile ((match = functionRegex.exec(text)) !== null) {\n\t\t\t\tconst startPos = document.positionAt(match.index);\n\n\t\t\t\tif (startPos.line > 0) {\n\t\t\t\t\tconst prevLine = new vscode.Position(startPos.line - 1, 0);\n\t\t\t\t\tconst range = new vscode.Range(prevLine, prevLine);\n\t\t\t\t\tdecorations.push({ range });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.activeEditor.setDecorations(this.decorationType, decorations);\n\t\t}\n\t}\n\n\tpublic dispose() {\n\t\tthis.decorationType.dispose();\n\t}\n}\n","import * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport * as toml from \"toml\";\nimport * as cp from \"child_process\";\nimport * as net from \"net\";\nimport {\n\tABI,\n\tConfig,\n\tForkDetails,\n\tTestFile,\n\tForkInfo,\n\tCustomTaskDefinition,\n\tTestExecutionResponse,\n\tDeployContract,\n\tDeployedContract,\n\tAccount,\n\tImportedAccounts,\n\tScriptResponse,\n} from \"../types\";\nimport { FoundryTaskProvider } from \"../providers/taskProvider\";\nimport { CockPitLogProvider } from \"../providers/logProvider\";\nimport { DEFAULT_ANVIL_ACCOUNTS, fileExists, ForgeCockpitCommand, readAccounts } from \"../utils\";\nimport { checksumAddress } from \"viem\";\n\nexport class FoundryProjectController {\n\tprivate workspaceRoot: vscode.Uri | undefined;\n\tpublic isFoundryProject: boolean = false;\n\tprivate fileWatchers: vscode.FileSystemWatcher[] = [];\n\tprivate buildInProgress: boolean = false;\n\tprivate buildQueue: boolean = false;\n\tprivate debounceTimer: NodeJS.Timeout | undefined;\n\tprivate _onDidBuildSucceed: vscode.EventEmitter<void> = new vscode.EventEmitter<void>();\n\tpublic readonly onDidBuildSucceed: vscode.Event<void> = this._onDidBuildSucceed.event;\n\tprivate taskProvider: FoundryTaskProvider;\n\tprivate taskProviderDisposable: vscode.Disposable | undefined;\n\tprivate accounts: Array<Account> = [];\n\tpublic config: Config = {\n\t\tverbosity: \"-vvvvv\",\n\t\tviaIR: false,\n\t\ttestDir: \"test\",\n\t\tsrcDir: \"src\",\n\t\toutputDir: \"out\",\n\t\tscriptDir: \"script\",\n\t\tworkspaceRoot: vscode.Uri.parse(\"\"),\n\t};\n\n\tconstructor(private logger: CockPitLogProvider) {\n\t\tthis.taskProvider = new FoundryTaskProvider(this, logger);\n\t\tthis.taskProviderDisposable = vscode.tasks.registerTaskProvider(\"foundry\", this.taskProvider);\n\t}\n\n\tpublic async initialize(): Promise<void> {\n\t\tconst workspaceFolders = vscode.workspace.workspaceFolders;\n\t\tif (!workspaceFolders || workspaceFolders.length === 0) {\n\t\t\tthis.logger.logToOutput(\"No workspace folder is open\");\n\t\t\tvscode.window.showInformationMessage(\"No workspace folder is open.\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst workspaceRoot = workspaceFolders[0].uri;\n\t\tthis.logger.logToOutput(`Searching for Foundry projects in workspace: ${workspaceRoot.fsPath}`);\n\n\t\tif (!(await this.isForgeInstalled())) {\n\t\t\tthis.logger.logToOutput(\"Foundry is not installed or not in PATH\");\n\t\t\tthis.showForgeNotInstalledError();\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst foundryProjects = await this.findFoundryProjects(workspaceRoot);\n\n\t\t\tif (foundryProjects.length === 0) {\n\t\t\t\tthrow new Error(\"No foundry.toml files found in workspace\");\n\t\t\t}\n\n\t\t\t// We only care for the first found project\n\t\t\tthis.workspaceRoot = foundryProjects[0];\n\n\t\t\tif (foundryProjects.length > 1) {\n\t\t\t\tthis.logger.logToOutput(\n\t\t\t\t\t`Multiple Foundry projects found. Using: ${this.workspaceRoot.fsPath}`\n\t\t\t\t);\n\t\t\t\tthis.logger.logToOutput(\n\t\t\t\t\t`Other projects found at: ${foundryProjects\n\t\t\t\t\t\t.slice(1)\n\t\t\t\t\t\t.map(p => p.fsPath)\n\t\t\t\t\t\t.join(\", \")}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tawait this.checkNodeModules();\n\t\t\tawait this.loadFoundryConfig();\n\t\t\tthis.isFoundryProject = true;\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Successfully loaded Foundry configuration from: ${this.workspaceRoot.fsPath}`\n\t\t\t);\n\t\t\tthis.logger.updateStatusBar(\"$(sync~spin) Forge cockpit detecting contracts...\");\n\t\t\tawait Promise.all([this.cleanOutputDirectory(), this.executeBuild(false)]);\n\t\t\tthis.setupWatchers();\n\t\t\tthis.logger.logToOutput(\"File watchers setup completed\");\n\t\t} catch (error) {\n\t\t\tconst errorMessage = `No Foundry project found in workspace. ${(error as Error).message}`;\n\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t`$(error) Forge cockpit ${errorMessage}`,\n\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.errorBackground\")\n\t\t\t);\n\t\t\tthis.isFoundryProject = false;\n\t\t}\n\t}\n\n\tprivate async findFoundryProjects(workspaceUri: vscode.Uri): Promise<vscode.Uri[]> {\n\t\tconst foundryProjects: vscode.Uri[] = [];\n\n\t\ttry {\n\t\t\tconst foundryFiles = await vscode.workspace.findFiles(\n\t\t\t\tnew vscode.RelativePattern(workspaceUri, \"**/foundry.toml\"),\n\t\t\t\t\"**/node_modules/**\"\n\t\t\t);\n\n\t\t\tfor (const file of foundryFiles) {\n\t\t\t\tconst projectDir = vscode.Uri.file(path.dirname(file.fsPath));\n\t\t\t\tfoundryProjects.push(projectDir);\n\t\t\t}\n\n\t\t\tfoundryProjects.sort((a, b) => {\n\t\t\t\tconst aDepth = path.relative(workspaceUri.fsPath, a.fsPath).split(path.sep).length;\n\t\t\t\tconst bDepth = path.relative(workspaceUri.fsPath, b.fsPath).split(path.sep).length;\n\t\t\t\treturn aDepth - bDepth;\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tthis.logger.logToOutput(`Error searching for Foundry projects: ${(error as Error).message}`);\n\t\t}\n\n\t\treturn foundryProjects;\n\t}\n\n\tprivate async checkNodeModules(): Promise<void> {\n\t\ttry {\n\t\t\tconst packageJsonPath = vscode.Uri.joinPath(this.workspaceRoot, \"package.json\");\n\t\t\tconst nodeModulesPath = vscode.Uri.joinPath(this.workspaceRoot, \"node_modules\");\n\n\t\t\tconst packageJsonExists = await fileExists(packageJsonPath);\n\t\t\tif (!packageJsonExists) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nodeModulesExists = await fileExists(nodeModulesPath);\n\t\t\tif (!nodeModulesExists) {\n\t\t\t\tconst message =\n\t\t\t\t\t\"package.json found but node_modules is missing. Please run 'npm install' or 'yarn install' to install dependencies. Incase your smartcontracts use node_modules for remappings\";\n\t\t\t\tthis.logger.logToOutput(message);\n\t\t\t\tvscode.window.showInformationMessage(message);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logger.logToOutput(`Error checking node_modules: ${(error as Error).message}`);\n\t\t}\n\t}\n\n\tprivate async loadFoundryConfig(): Promise<void> {\n\t\tif (!this.workspaceRoot) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst foundryTomlUri = vscode.Uri.joinPath(this.workspaceRoot, \"foundry.toml\");\n\t\tconst foundryTomlContent = await vscode.workspace.fs.readFile(foundryTomlUri);\n\t\tconst parsedContent = new TextDecoder().decode(foundryTomlContent);\n\t\tconst foundryConfig = toml.parse(parsedContent);\n\n\t\tthis.config = {\n\t\t\tverbosity: \"-vvvvv\",\n\t\t\tviaIR: foundryConfig.profile?.default?.via_ir || false,\n\t\t\ttestDir: foundryConfig.profile?.default?.test || \"test\",\n\t\t\tsrcDir: foundryConfig.profile?.default?.src || \"src\",\n\t\t\toutputDir: foundryConfig.profile?.default?.out || \"out\",\n\t\t\tscriptDir: foundryConfig.profile?.default?.script || \"script\",\n\t\t\tworkspaceRoot: this.workspaceRoot,\n\t\t} as Config;\n\t}\n\n\tprivate showForgeNotInstalledError(): void {\n\t\tthis.logger.logToOutput(\"Showing Foundry installation error dialog\");\n\t\tvscode.window\n\t\t\t.showErrorMessage(\n\t\t\t\t\"Foundry is not installed or not in PATH. Please install Foundry and ensure it's in your PATH.\",\n\t\t\t\t\"Install Foundry\",\n\t\t\t\t\"Learn More\"\n\t\t\t)\n\t\t\t.then(selection => {\n\t\t\t\tif (selection === \"Install Foundry\") {\n\t\t\t\t\tthis.logger.logToOutput(\"User clicked 'Install Foundry' - opening installation guide\");\n\t\t\t\t\tvscode.env.openExternal(\n\t\t\t\t\t\tvscode.Uri.parse(\"https://book.getfoundry.sh/getting-started/installation\")\n\t\t\t\t\t);\n\t\t\t\t} else if (selection === \"Learn More\") {\n\t\t\t\t\tthis.logger.logToOutput(\"User clicked 'Learn More' - opening Foundry documentation\");\n\t\t\t\t\tvscode.env.openExternal(vscode.Uri.parse(\"https://book.getfoundry.sh/\"));\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate setupWatchers(): void {\n\t\tif (!this.workspaceRoot) {\n\t\t\tthis.logger.logToOutput(\"Cannot setup watchers - no workspace root\");\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logger.logToOutput(\n\t\t\t`Setting up file watchers for ${this.config?.srcDir} and ${this.config?.outputDir}`\n\t\t);\n\n\t\tthis.createFileWatcher(`${this.config?.srcDir}/**/*.sol`, this.handleSourceChange.bind(this));\n\t\tthis.createFileWatcher(`${this.config?.testDir}/**/*.sol`, this.handleSourceChange.bind(this));\n\t\tthis.createFileWatcher(\n\t\t\t`${this.config?.scriptDir}/**/*.sol`,\n\t\t\tthis.handleSourceChange.bind(this)\n\t\t);\n\t\tthis.createFileWatcher(this.config?.outputDir || \"out\", this.handleFileChange.bind(this));\n\t}\n\n\tprivate createFileWatcher(pattern: string, changeHandler: (uri: vscode.Uri) => void): void {\n\t\tif (!this.workspaceRoot) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst filePattern = new vscode.RelativePattern(this.workspaceRoot, pattern);\n\t\tconst watcher = vscode.workspace.createFileSystemWatcher(filePattern, false, false, false);\n\n\t\twatcher.onDidCreate(changeHandler);\n\t\twatcher.onDidChange(changeHandler);\n\t\twatcher.onDidDelete(changeHandler);\n\n\t\tthis.fileWatchers.push(watcher);\n\t}\n\n\tprivate handleSourceChange(uri: vscode.Uri): void {\n\t\tthis.logger.logToOutput(`Source file changed: ${path.basename(uri.fsPath)}`);\n\t\tthis.debouncedBuild(1500);\n\t}\n\n\tprivate handleFileChange(uri: vscode.Uri): void {\n\t\tthis.logger.logToOutput(`Output file changed: ${path.basename(uri.fsPath)}`);\n\t\tthis.debouncedBuild(1000);\n\t}\n\n\tprivate debouncedBuild(delay: number): void {\n\t\tif (this.debounceTimer) {\n\t\t\tclearTimeout(this.debounceTimer);\n\t\t}\n\n\t\tthis.debounceTimer = setTimeout(async () => {\n\t\t\tawait this.triggerBuild();\n\t\t\tvscode.commands.executeCommand(ForgeCockpitCommand.RefreshTestsCommand);\n\t\t\tvscode.commands.executeCommand(ForgeCockpitCommand.LoadCockPitWalletsCommand);\n\t\t}, delay);\n\t}\n\n\tpublic async triggerBuild(): Promise<void> {\n\t\tif (!this.isFoundryProject || !this.workspaceRoot) {\n\t\t\tthis.logger.logToOutput(\"Cannot trigger build - not a Foundry project or no workspace\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.buildInProgress) {\n\t\t\tthis.logger.logToOutput(\"Build already in progress - queuing next build\");\n\t\t\tthis.buildQueue = true;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.buildInProgress = true;\n\t\tthis.logger.logToOutput(\"Triggering build process\");\n\t\tthis.logger.updateStatusBar(\n\t\t\t\"$(sync~spin) Forge cockpit Building...\",\n\t\t\tnew vscode.ThemeColor(\"statusBarItem.warningBackground\")\n\t\t);\n\n\t\ttry {\n\t\t\tawait this.executeBuild(false);\n\t\t} catch (error) {\n\t\t\tthis.logger.logToOutput(`Build trigger failed: ${(error as Error).stack}`);\n\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t`$(error) Forge cockpit build failed: ${(error as Error).message}`,\n\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.errorBackground\")\n\t\t\t);\n\t\t} finally {\n\t\t\tthis.buildInProgress = false;\n\t\t\tif (this.buildQueue) {\n\t\t\t\tthis.logger.logToOutput(\"Processing queued build\");\n\t\t\t\tthis.buildQueue = false;\n\t\t\t\tsetTimeout(() => this.triggerBuild(), 100);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getExecutablePath(name: string): Promise<string> {\n\t\tconst homeDir = process.env.HOME || process.env.USERPROFILE;\n\t\tconst likelyPath =\n\t\t\tprocess.platform === \"win32\"\n\t\t\t\t? `${homeDir}\\\\.foundry\\\\bin\\\\${name}.exe`\n\t\t\t\t: `${homeDir}/.foundry/bin/${name}`;\n\n\t\treturn new Promise<string>(resolve => {\n\t\t\tfs.access(likelyPath, fs.constants.X_OK, (error: any) => {\n\t\t\t\tresolve(error ? name : likelyPath);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate async executeCommand(\n\t\targs: string[] = [],\n\t\tcwd: string = this.workspaceRoot?.fsPath || \"\",\n\t\tstreamOutput: boolean = true\n\t): Promise<{ stdout: string; stderr: string; exitCode: number }> {\n\t\tconst env = { ...process.env };\n\t\tconst homeDir = process.env.HOME || process.env.USERPROFILE;\n\t\tconst foundryBinDir = path.dirname(\n\t\t\tprocess.platform === \"win32\"\n\t\t\t\t? `${homeDir}\\\\.foundry\\\\bin\\\\${args[0]}.exe`\n\t\t\t\t: `${homeDir}/.foundry/bin/${args[0]}`\n\t\t);\n\n\t\tenv.PATH = `${foundryBinDir}${process.platform === \"win32\" ? \";\" : \":\"}${env.PATH || \"\"}`;\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (!streamOutput) {\n\t\t\t\tcp.exec(args.join(\" \"), { cwd, env }, (error, stdout, stderr) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject({ error, stderr, exitCode: error.code || 1 });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve({ stdout, stderr, exitCode: 0 });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst [command, ...commandArgs] = args;\n\t\t\tconst child = cp.spawn(command, commandArgs, { cwd, env, shell: true });\n\n\t\t\tlet stdout = \"\";\n\t\t\tlet stderr = \"\";\n\n\t\t\tchild.stdout?.on(\"data\", data => {\n\t\t\t\tconst output = data.toString();\n\t\t\t\tstdout += output;\n\t\t\t\tif (streamOutput) {\n\t\t\t\t\tthis.logger.logToOutput(output.trim());\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tchild.stderr?.on(\"data\", data => {\n\t\t\t\tconst output = data.toString();\n\t\t\t\tstderr += output;\n\t\t\t\tif (streamOutput) {\n\t\t\t\t\tthis.logger.logToOutput(output.trim());\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tchild.on(\"error\", error => {\n\t\t\t\tthis.logger.logToOutput(`Process error: ${error.stack}`);\n\t\t\t\treject({ error, stderr, exitCode: 1 });\n\t\t\t});\n\n\t\t\tchild.on(\"close\", code => {\n\t\t\t\tresolve({ stdout, stderr, exitCode: code || 0 });\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate async executeBuild(useViaIr: boolean): Promise<boolean> {\n\t\ttry {\n\t\t\tthis.logger.logToOutput(`Starting build${useViaIr ? \" with --via-ir\" : \"\"}`);\n\n\t\t\tconst forgePath = await this.getExecutablePath(\"forge\");\n\t\t\tconst args = [forgePath, \"build\", \"--contracts\", `./${this.config?.srcDir}`];\n\n\t\t\tif (useViaIr) {\n\t\t\t\targs.push(\"--via-ir\");\n\t\t\t}\n\n\t\t\tconst result = await this.executeCommand(args, this.workspaceRoot?.fsPath || \"\", true);\n\n\t\t\tif (result.exitCode !== 0) {\n\t\t\t\tif (!useViaIr && result.stderr.includes(\"--via-ir\")) {\n\t\t\t\t\tthis.logger.logToOutput(\"Retrying build with --via-ir flag\");\n\t\t\t\t\treturn this.executeBuild(true);\n\t\t\t\t}\n\t\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t\t`$(error) Forge cockpit build failed`,\n\t\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.errorBackground\")\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis.logger.logToOutput(\"Build completed successfully\");\n\t\t\tthis.logger.updateStatusBar(\"$(check) Forge cockpit build succeeded\");\n\t\t\tthis.onBuildSucceeded();\n\t\t\treturn true;\n\t\t} catch (error: any) {\n\t\t\tthis.logger.logToOutput(`Build error: ${(error as Error).stack}`);\n\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t`$(error) Forge cockpit build failed: ${(error as Error).message}`,\n\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.errorBackground\")\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic async runTest(\n\t\tcontractFile: string,\n\t\ttestName: string,\n\t\tconfig: Config\n\t): Promise<TestExecutionResponse> {\n\t\tif (!this.isFoundryProject || !this.workspaceRoot) {\n\t\t\tthis.logger.logToOutput(\"Cannot run test - not a Foundry project or no workspace\");\n\t\t\treturn {\n\t\t\t\ttestName: testName,\n\t\t\t\tsuccess: false,\n\t\t\t} as TestExecutionResponse;\n\t\t}\n\n\t\tthis.config = config;\n\t\tthis.logger.logToOutput(`Starting test execution: ${testName} in ${contractFile}`);\n\t\tthis.logger.updateStatusBar(\n\t\t\t`$(beaker~spin) Forge cockpit running test: ${testName}`,\n\t\t\tnew vscode.ThemeColor(\"statusBarItem.warningBackground\")\n\t\t);\n\n\t\ttry {\n\t\t\tconst definition: CustomTaskDefinition = {\n\t\t\t\ttype: \"foundry\",\n\t\t\t\tcommand: \"test\",\n\t\t\t\ttestName: `\"\\\\\\\\b${testName}\\\\\\\\b\"`,\n\t\t\t\tcontractFile: contractFile,\n\t\t\t\ttaskId: `test-${testName}-${Date.now()}`,\n\t\t\t\tport: \"0\",\n\t\t\t};\n\n\t\t\tconst execution = await this.taskProvider.executeTask(definition);\n\t\t\tthis.logger.logToOutput(`Test task created for: ${testName}`);\n\n\t\t\treturn new Promise<TestExecutionResponse>(resolve => {\n\t\t\t\tconst disposable = vscode.tasks.onDidEndTaskProcess(e => {\n\t\t\t\t\tif (e.execution === execution) {\n\t\t\t\t\t\tif (e.exitCode === 0) {\n\t\t\t\t\t\t\tthis.logger.logToOutput(`Test passed: ${testName}`);\n\t\t\t\t\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t\t\t\t\t`$(check) Forge cockpit test passed: ${testName}`,\n\t\t\t\t\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.successBackground\")\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\ttestName: testName,\n\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t} as TestExecutionResponse);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.logger.logToOutput(`Test failed: ${testName} with exit code ${e.exitCode}`);\n\t\t\t\t\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t\t\t\t\t`$(error) Forge cockpit test failed: ${testName}`,\n\t\t\t\t\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.errorBackground\")\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\ttestName: testName,\n\t\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\t\terror: `Test failed with exit code ${e.exitCode}`,\n\t\t\t\t\t\t\t} as TestExecutionResponse);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.logger.updateStatusBar(\"$(check) Forge cockpit ready\");\n\t\t\t\t\t\t}, 3000);\n\n\t\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tthis.logger.logToOutput(`Failed to run test ${testName}: ${(error as Error).stack}`);\n\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t`$(error) Forge cockpit failed to run test: ${testName}`,\n\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.errorBackground\")\n\t\t\t);\n\t\t\treturn {\n\t\t\t\ttestName: testName,\n\t\t\t\tsuccess: false,\n\t\t\t\terror: `Failed to run test: ${(error as Error).message}`,\n\t\t\t} as TestExecutionResponse;\n\t\t}\n\t}\n\tpublic async runAllTests(config: Config): Promise<TestExecutionResponse[]> {\n\t\tif (!this.isFoundryProject || !this.workspaceRoot) {\n\t\t\tthis.logger.logToOutput(\"Cannot run tests - not a Foundry project or no workspace\");\n\t\t\treturn [];\n\t\t}\n\n\t\tthis.config = config;\n\t\tthis.logger.logToOutput(`Starting all tests execution`);\n\t\tthis.logger.updateStatusBar(\n\t\t\t`$(beaker~spin) Forge cockpit running all tests`,\n\t\t\tnew vscode.ThemeColor(\"statusBarItem.warningBackground\")\n\t\t);\n\n\t\ttry {\n\t\t\tconst args = [\"test\", \"--json\"];\n\n\t\t\tif (config.viaIR) {\n\t\t\t\targs.push(\"--via-ir\");\n\t\t\t}\n\n\t\t\tif (config.verbosity) {\n\t\t\t\targs.push(\"-v\", config.verbosity);\n\t\t\t}\n\n\t\t\tconst workingDirectory =\n\t\t\t\ttypeof this.workspaceRoot === \"string\"\n\t\t\t\t\t? this.workspaceRoot\n\t\t\t\t\t: this.workspaceRoot?.fsPath || process.cwd();\n\n\t\t\treturn new Promise<TestExecutionResponse[]>(resolve => {\n\t\t\t\tconst { spawn } = require(\"child_process\");\n\t\t\t\tconst forgeProcess = spawn(\"forge\", args, {\n\t\t\t\t\tcwd: workingDirectory,\n\t\t\t\t\tshell: true,\n\t\t\t\t});\n\n\t\t\t\tlet output = \"\";\n\t\t\t\tlet errorOutput = \"\";\n\n\t\t\t\tforgeProcess.stdout?.on(\"data\", (data: Buffer) => {\n\t\t\t\t\toutput += data.toString();\n\t\t\t\t});\n\n\t\t\t\tforgeProcess.stderr?.on(\"data\", (data: Buffer) => {\n\t\t\t\t\terrorOutput += data.toString();\n\t\t\t\t});\n\n\t\t\t\tforgeProcess.on(\"close\", (code: number) => {\n\t\t\t\t\tconst results = this.parseTestResults(output);\n\t\t\t\t\tthis.logger.logToOutput(\n\t\t\t\t\t\t`All tests completed successfully \\n\\n with results: ${JSON.stringify(results)}\\n\\n`\n\t\t\t\t\t);\n\t\t\t\t\tif (code === 0) {\n\t\t\t\t\t\tthis.logger.logToOutput(`All tests completed successfully`);\n\t\t\t\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t\t\t\t`$(check) Forge cockpit all tests passed`,\n\t\t\t\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.successBackground\")\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.logger.logToOutput(`Some tests failed with exit code ${code}`);\n\t\t\t\t\t\tif (errorOutput) {\n\t\t\t\t\t\t\tthis.logger.logToOutput(`Error output: ${errorOutput}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t\t\t\t`$(error) Forge cockpit some tests failed`,\n\t\t\t\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.errorBackground\")\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.logger.updateStatusBar(\"$(check) Forge cockpit ready\");\n\t\t\t\t\t}, 3000);\n\n\t\t\t\t\tresolve(results);\n\t\t\t\t});\n\n\t\t\t\tforgeProcess.on(\"error\", (error: Error) => {\n\t\t\t\t\tthis.logger.logToOutput(`Failed to start forge process: ${error.message}`);\n\t\t\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t\t\t`$(error) Forge cockpit failed to run tests`,\n\t\t\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.errorBackground\")\n\t\t\t\t\t);\n\t\t\t\t\tresolve([]);\n\t\t\t\t});\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tthis.logger.logToOutput(`Failed to run all tests: ${(error as Error).stack}`);\n\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t`$(error) Forge cockpit failed to run tests`,\n\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.errorBackground\")\n\t\t\t);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tprivate parseTestResults(output: string): TestExecutionResponse[] {\n\t\tconst results: TestExecutionResponse[] = [];\n\n\t\ttry {\n\t\t\tconst json = JSON.parse(output);\n\t\t\tif (!json || typeof json !== \"object\") {\n\t\t\t\treturn results;\n\t\t\t}\n\n\t\t\tObject.keys(json).forEach(contractKey => {\n\t\t\t\tif (!contractKey.includes(\".sol:\")) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst contractData = json[contractKey];\n\t\t\t\tif (!contractData?.test_results) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst testResults = contractData.test_results;\n\t\t\t\tconst fileName = contractKey.split(\":\")[0]?.split(\"/\").pop() || contractKey;\n\n\t\t\t\tObject.keys(testResults).forEach(testKey => {\n\t\t\t\t\tconst testResult = testResults[testKey];\n\t\t\t\t\tif (!testResult?.status) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst isSuccess = testResult.status === \"Success\";\n\t\t\t\t\tconst error = !isSuccess ? testResult.reason || \"Unknown error\" : undefined;\n\n\t\t\t\t\tif (testKey.startsWith(\"Found \") && testKey.includes(\"instances:\")) {\n\t\t\t\t\t\tconst testNamesMatch = testKey.match(/instances: (.+)$/);\n\t\t\t\t\t\tconst testNames = testNamesMatch?.[1]?.split(\", \") || [];\n\n\t\t\t\t\t\ttestNames.forEach(testName => {\n\t\t\t\t\t\t\tconst trimmedTestName = testName.trim().replace(/\\(.*\\)$/, \"\");\n\t\t\t\t\t\t\tif (!trimmedTestName) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst testResultsMap = new Map<string, boolean>();\n\t\t\t\t\t\t\ttestResultsMap.set(trimmedTestName, isSuccess);\n\n\t\t\t\t\t\t\tresults.push({\n\t\t\t\t\t\t\t\ttestName: trimmedTestName,\n\t\t\t\t\t\t\t\tfileName,\n\t\t\t\t\t\t\t\tsuccess: isSuccess,\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttestResults: testResultsMap,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst testResultsMap = new Map<string, boolean>();\n\t\t\t\t\t\ttestResultsMap.set(testKey, isSuccess);\n\n\t\t\t\t\t\tresults.push({\n\t\t\t\t\t\t\ttestName: testKey.replace(/\\(.*\\)$/, \"\"),\n\t\t\t\t\t\t\tfileName,\n\t\t\t\t\t\t\tsuccess: isSuccess,\n\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\ttestResults: testResultsMap,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t} catch (parseError) {\n\t\t\tthis.logger.logToOutput(`Failed to parse test results: ${parseError}`);\n\t\t}\n\n\t\treturn results;\n\t}\n\tpublic async runScript(contractInfo: DeployContract): Promise<ScriptResponse> {\n\t\tif (!this.isFoundryProject || !this.workspaceRoot) {\n\t\t\tthis.logger.logToOutput(\"Cannot run script - not a Foundry project or no workspace\");\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\tcontracts: [\n\t\t\t\t\t{\n\t\t\t\t\t\tcontractName: contractInfo.contractName,\n\t\t\t\t\t\taddress: \"\",\n\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\thash: \"\",\n\t\t\t\t\t\tnodeUrl: contractInfo.nodeUrl,\n\t\t\t\t\t\tlogs: undefined,\n\t\t\t\t\t} as DeployedContract,\n\t\t\t\t],\n\t\t\t\tscriptName: contractInfo.contractName,\n\t\t\t} as ScriptResponse;\n\t\t}\n\n\t\tthis.logger.logToOutput(\n\t\t\t`Starting script execution: ${contractInfo.contractName} in ${contractInfo.scriptName}`\n\t\t);\n\t\tthis.logger.updateStatusBar(\n\t\t\t`$(play~spin) Forge cockpit running script: ${contractInfo.contractName}`,\n\t\t\tnew vscode.ThemeColor(\"statusBarItem.warningBackground\")\n\t\t);\n\n\t\ttry {\n\t\t\tconst account = this.accounts.find(\n\t\t\t\taccount =>\n\t\t\t\t\tchecksumAddress(account.publicKey as `0x${string}`) ===\n\t\t\t\t\tchecksumAddress(contractInfo.msgSender as `0x${string}`)\n\t\t\t);\n\t\t\tif (!account) {\n\t\t\t\treturn {\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tcontracts: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontractName: contractInfo.contractName,\n\t\t\t\t\t\t\taddress: \"\",\n\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\thash: \"\",\n\t\t\t\t\t\t\tnodeUrl: contractInfo.nodeUrl,\n\t\t\t\t\t\t\tlogs: undefined,\n\t\t\t\t\t\t} as DeployedContract,\n\t\t\t\t\t],\n\t\t\t\t\tscriptName: contractInfo.contractName,\n\t\t\t\t} as ScriptResponse;\n\t\t\t}\n\t\t\tconst forgePath = await this.getExecutablePath(\"forge\");\n\t\t\tconst scriptArgs = this.buildScriptArgs({\n\t\t\t\t...contractInfo,\n\t\t\t\tprivateKey: account.privateKey,\n\t\t\t});\n\t\t\tif (scriptArgs.length === 0) {\n\t\t\t\treturn {\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tcontracts: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontractName: contractInfo.contractName,\n\t\t\t\t\t\t\taddress: \"\",\n\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\thash: \"\",\n\t\t\t\t\t\t\tnodeUrl: contractInfo.nodeUrl,\n\t\t\t\t\t\t\tlogs: undefined,\n\t\t\t\t\t\t} as DeployedContract,\n\t\t\t\t\t],\n\t\t\t\t\tscriptName: contractInfo.contractName,\n\t\t\t\t} as ScriptResponse;\n\t\t\t}\n\t\t\tconst args = [forgePath, ...scriptArgs];\n\n\t\t\tthis.logger.logToOutput(`Executing command: ${args.join(\" \")}`);\n\n\t\t\tconst result = await this.executeCommand(args, this.workspaceRoot?.fsPath || \"\", true);\n\n\t\t\tif (result.exitCode !== 0) {\n\t\t\t\tthis.logger.logToOutput(\n\t\t\t\t\t`Script failed: ${contractInfo.contractName} with exit code ${result.exitCode}`\n\t\t\t\t);\n\t\t\t\tthis.logger.logToOutput(`Error output: ${result.stderr}`);\n\n\t\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t\t`$(error) Forge cockpit script failed: ${contractInfo.contractName}`,\n\t\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.errorBackground\")\n\t\t\t\t);\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.logger.updateStatusBar(\"$(check) Forge cockpit ready\");\n\t\t\t\t}, 3000);\n\n\t\t\t\treturn {\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\tcontracts: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontractName: contractInfo.contractName,\n\t\t\t\t\t\t\taddress: \"\",\n\t\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t\thash: \"\",\n\t\t\t\t\t\t\tnodeUrl: contractInfo.nodeUrl,\n\t\t\t\t\t\t\tlogs: undefined,\n\t\t\t\t\t\t} as DeployedContract,\n\t\t\t\t\t],\n\t\t\t\t\tscriptName: contractInfo.contractName,\n\t\t\t\t} as ScriptResponse;\n\t\t\t}\n\n\t\t\tconst deployedContracts = await this.extractDeployedContracts(contractInfo);\n\n\t\t\tif (deployedContracts.length === 0) {\n\t\t\t\tthis.logger.logToOutput(\n\t\t\t\t\t`Script completed successfully but no contract deployments detected: ${contractInfo.contractName}`\n\t\t\t\t);\n\t\t\t\tdeployedContracts.push({\n\t\t\t\t\tcontractName: contractInfo.contractName,\n\t\t\t\t\taddress: \"\",\n\t\t\t\t\tsuccess: true,\n\t\t\t\t\thash: \"\",\n\t\t\t\t\tnodeUrl: contractInfo.nodeUrl,\n\t\t\t\t\tlogs: undefined,\n\t\t\t\t} as DeployedContract);\n\t\t\t}\n\n\t\t\tthis.logger.logToOutput(`Script completed successfully: ${contractInfo.contractName}`);\n\t\t\tthis.logger.logToOutput(`Deployment results: ${JSON.stringify(deployedContracts, null, 2)}`);\n\n\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t`$(check) Forge cockpit script completed: ${contractInfo.contractName}`,\n\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.successBackground\")\n\t\t\t);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.logger.updateStatusBar(\"$(check) Forge cockpit ready\");\n\t\t\t}, 3000);\n\n\t\t\treturn {\n\t\t\t\tsuccess: true,\n\t\t\t\tcontracts: deployedContracts,\n\t\t\t\tscriptName: contractInfo.contractName,\n\t\t\t} as ScriptResponse;\n\t\t} catch (error: any) {\n\t\t\tthis.logger.logToOutput(`Script execution error: ${(error as Error).message}`);\n\n\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t`$(error) Forge cockpit script failed: ${contractInfo.contractName}`,\n\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.errorBackground\")\n\t\t\t);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.logger.updateStatusBar(\"$(check) Forge cockpit ready\");\n\t\t\t}, 3000);\n\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\tcontracts: [\n\t\t\t\t\t{\n\t\t\t\t\t\tcontractName: contractInfo.contractName,\n\t\t\t\t\t\taddress: \"\",\n\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\thash: \"\",\n\t\t\t\t\t\tnodeUrl: contractInfo.nodeUrl,\n\t\t\t\t\t\tlogs: undefined,\n\t\t\t\t\t} as DeployedContract,\n\t\t\t\t],\n\t\t\t\tscriptName: contractInfo.contractName,\n\t\t\t} as ScriptResponse;\n\t\t}\n\t}\n\n\tpublic async extractDeployedContracts(contractInfo: DeployContract): Promise<DeployedContract[]> {\n\t\tif (!this.workspaceRoot) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst deployedContracts: DeployedContract[] = [];\n\n\t\ttry {\n\t\t\tconst broadcastDir = vscode.Uri.joinPath(\n\t\t\t\tthis.workspaceRoot,\n\t\t\t\t\"broadcast\",\n\t\t\t\t`${contractInfo.scriptName}`\n\t\t\t);\n\t\t\tconst runLatestFiles = await vscode.workspace.findFiles(\n\t\t\t\tnew vscode.RelativePattern(broadcastDir, `**/${contractInfo.chainId}/run-latest.json`)\n\t\t\t);\n\n\t\t\tfor (const fileUri of runLatestFiles) {\n\t\t\t\tconst fileData = await vscode.workspace.fs.readFile(fileUri);\n\t\t\t\tconst content = JSON.parse(new TextDecoder().decode(fileData));\n\n\t\t\t\tif (content.transactions && Array.isArray(content.transactions)) {\n\t\t\t\t\tfor (const tx of content.transactions) {\n\t\t\t\t\t\tif (tx.transactionType === \"CREATE\" && tx.contractAddress) {\n\t\t\t\t\t\t\tdeployedContracts.push({\n\t\t\t\t\t\t\t\tcontractName: tx.contractName || \"Unknown\",\n\t\t\t\t\t\t\t\taddress: tx.contractAddress,\n\t\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\t\thash: tx.hash || \"\",\n\t\t\t\t\t\t\t\tnodeUrl: contractInfo.nodeUrl || \"\",\n\t\t\t\t\t\t\t\tlogs: undefined,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Extracted ${deployedContracts.length} deployed contracts from broadcast files`\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthis.logger.logToOutput(`Failed to read deployment files: ${(error as Error).stack}`);\n\t\t}\n\n\t\treturn deployedContracts;\n\t}\n\tprivate buildScriptArgs(contractInfo: DeployContract): string[] {\n\t\tconst args = [\"script\", `${this.config.scriptDir}/${contractInfo.scriptName}`];\n\n\t\tif (contractInfo.scriptName) {\n\t\t\targs.push(contractInfo.scriptName);\n\t\t}\n\n\t\tif (contractInfo.privateKey) {\n\t\t\targs.push(\"--private-key\", contractInfo.privateKey);\n\t\t}\n\n\t\tif (contractInfo.viaIR) {\n\t\t\targs.push(\"--via-ir\");\n\t\t}\n\n\t\targs.push(\"--rpc-url\", contractInfo.nodeUrl);\n\t\targs.push(\"--broadcast\");\n\t\targs.push(\"-vvvvv\");\n\n\t\treturn args;\n\t}\n\tpublic async cleanOutputDirectory(): Promise<void> {\n\t\tif (!this.isFoundryProject || !this.workspaceRoot) {\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t\"Cannot clean output directory - not a Foundry project or no workspace\"\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logger.updateStatusBar(\n\t\t\t`$(sync~spin) Forge cockpit cleaning ${this.config.outputDir}...`,\n\t\t\tnew vscode.ThemeColor(\"statusBarItem.warningBackground\")\n\t\t);\n\n\t\ttry {\n\t\t\tthis.logger.logToOutput(`Starting clean of ${this.config.outputDir}`);\n\n\t\t\tconst forgePath = await this.getExecutablePath(\"forge\");\n\t\t\tconst args = [forgePath, \"clean\"];\n\n\t\t\tconst result = await this.executeCommand(args, this.workspaceRoot?.fsPath || \"\", true);\n\n\t\t\tif (result.exitCode !== 0) {\n\t\t\t\tthis.logger.logToOutput(`Clean failed with exit code: ${result.exitCode}`);\n\t\t\t} else {\n\t\t\t\tthis.logger.logToOutput(\"Clean completed successfully\");\n\t\t\t}\n\n\t\t\tthis.logger.updateStatusBar(\"$(check) Forge cockpit clean completed\");\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.logger.updateStatusBar(\"$(check) Forge cockpit ready\");\n\t\t\t}, 1500);\n\t\t} catch (error: any) {\n\t\t\tthis.logger.logToOutput(`Clean error: ${(error as Error).stack}`);\n\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t`$(error) Forge cockpit clean failed: ${(error as Error).message}`,\n\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.errorBackground\")\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async onBuildSucceeded(): Promise<void> {\n\t\tthis.logger.logToOutput(\"Build succeeded - scanning for contract ABIs\");\n\t\tawait this.getAllContractABIs();\n\t\tthis.logger.logToOutput(\"Firing build success event\");\n\t\tthis._onDidBuildSucceed.fire();\n\t}\n\tpublic async loadWallets(): Promise<string[]> {\n\t\tlet accounts = [] as string[];\n\t\ttry {\n\t\t\tif (!this.workspaceRoot) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tconst cockpitAccounts = vscode.Uri.joinPath(this.workspaceRoot, \"cockpit-accounts.json\");\n\t\t\tconst exists = await fileExists(cockpitAccounts);\n\n\t\t\tif (!exists) {\n\t\t\t\tthis.logger.logToOutput(\"No cockpit-accounts.json file found, using default accounts\");\n\t\t\t\tconst content = new TextEncoder().encode(JSON.stringify(DEFAULT_ANVIL_ACCOUNTS, null, 2));\n\t\t\t\ttry {\n\t\t\t\t\tawait vscode.workspace.fs.writeFile(cockpitAccounts, content);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logger.logToOutput(`Error writing default accounts: ${(error as Error).message}`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst rawAccounts = await vscode.workspace.fs.readFile(cockpitAccounts);\n\t\t\tconst parsedAccounts = JSON.parse(new TextDecoder().decode(rawAccounts)) as ImportedAccounts;\n\t\t\tconst readAcc = readAccounts(\n\t\t\t\tparsedAccounts ? parsedAccounts.accounts : DEFAULT_ANVIL_ACCOUNTS.accounts\n\t\t\t);\n\t\t\tthis.accounts = readAcc;\n\t\t\tthis.logger.logToOutput(`Loaded cockpit wallets with info: ${JSON.stringify(readAcc)}`);\n\t\t\taccounts = readAcc.map(account => account.publicKey);\n\t\t} catch (error) {\n\t\t\tthis.logger.updateStatusBar(`$(error) Forge cockpit ${(error as Error).message}`);\n\t\t\tthis.logger.logToOutput(`Error loading default wallets: ${(error as Error).stack}`);\n\t\t}\n\t\treturn accounts;\n\t}\n\tpublic async getAllContractABIs(): Promise<TestFile[]> {\n\t\tif (!this.workspaceRoot || !this.isFoundryProject) {\n\t\t\tconst errorMessage = \"cannot scan for contracts: Not a valid Foundry project\";\n\t\t\tthis.logger.logToOutput(`Error: ${errorMessage}`);\n\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t`$(error) Forge cockpit ${errorMessage}`,\n\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.errorBackground\")\n\t\t\t);\n\t\t\treturn [];\n\t\t}\n\n\t\tthis.logger.logToOutput(`Scanning for contract ABIs in ${this.config?.outputDir}`);\n\t\tconst outputDirUri = vscode.Uri.joinPath(this.workspaceRoot, this.config?.outputDir);\n\t\tconst contracts: TestFile[] = [];\n\n\t\ttry {\n\t\t\tconst jsonPattern = new vscode.RelativePattern(outputDirUri, \"**/*.json\");\n\t\t\tconst jsonFiles = await vscode.workspace.findFiles(jsonPattern);\n\n\t\t\tthis.logger.logToOutput(`Found ${jsonFiles.length} JSON files in output directory`);\n\n\t\t\tif (jsonFiles.length === 0) {\n\t\t\t\tconst message = `No contract files found in ${this.config.testDir} directory. Have you compiled the project?`;\n\t\t\t\tthis.logger.logToOutput(message);\n\t\t\t\tthis.triggerBuild();\n\t\t\t\tvscode.window.showInformationMessage(message);\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tlet contractCount = 0;\n\t\t\tfor (const fileUri of jsonFiles) {\n\t\t\t\tconst contractName = path.basename(fileUri.fsPath, \".json\");\n\n\t\t\t\ttry {\n\t\t\t\t\tconst fileData = await vscode.workspace.fs.readFile(fileUri);\n\t\t\t\t\tconst content = JSON.parse(new TextDecoder().decode(fileData));\n\t\t\t\t\tconst abi = content.abi as ABI;\n\t\t\t\t\tconst bytecode =\n\t\t\t\t\t\tcontent.bytecode && content.bytecode.object ? (content.bytecode.object as string) : \"\";\n\t\t\t\t\tconst solFileName =\n\t\t\t\t\t\tcontent.ast && content.ast.absolutePath\n\t\t\t\t\t\t\t? content.ast && path.basename(content.ast.absolutePath)\n\t\t\t\t\t\t\t: \"\";\n\t\t\t\t\tif (abi) {\n\t\t\t\t\t\tcontracts.push({\n\t\t\t\t\t\t\tfileName: contractName,\n\t\t\t\t\t\t\tfilePath: fileUri.fsPath,\n\t\t\t\t\t\t\tsolFileName: solFileName,\n\t\t\t\t\t\t\ttests: [],\n\t\t\t\t\t\t\tabi,\n\t\t\t\t\t\t\tbytecode,\n\t\t\t\t\t\t\tisFolder: false,\n\t\t\t\t\t\t} as TestFile);\n\t\t\t\t\t\tcontractCount++;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logger.logToOutput(\n\t\t\t\t\t\t`Failed to parse contract file ${contractName}: ${(error as Error).stack}`\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.logger.logToOutput(`Successfully loaded ${contractCount} contracts`);\n\t\t\treturn contracts;\n\t\t} catch (error) {\n\t\t\tconst errorMessage = `error scanning output directory: ${(error as Error).message}`;\n\t\t\tthis.logger.logToOutput(`Error: ${(error as Error).stack}`);\n\t\t\tthis.logger.updateStatusBar(`$(error) Forge cockpit ${errorMessage}`);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tprivate async isForgeInstalled(): Promise<boolean> {\n\t\treturn new Promise<boolean>(resolve => {\n\t\t\tlet command =\n\t\t\t\tprocess.platform === \"win32\"\n\t\t\t\t\t? \"where forge 2>nul\"\n\t\t\t\t\t: \"which forge 2>/dev/null || command -v forge 2>/dev/null\";\n\n\t\t\tcp.exec(command, (error, stdout) => {\n\t\t\t\tif (!error && stdout) {\n\t\t\t\t\tresolve(true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst homeDir = process.env.HOME || process.env.USERPROFILE;\n\t\t\t\tconst foundryPath =\n\t\t\t\t\tprocess.platform === \"win32\"\n\t\t\t\t\t\t? `${homeDir}\\\\.foundry\\\\bin\\\\forge.exe`\n\t\t\t\t\t\t: `${homeDir}/.foundry/bin/forge`;\n\t\t\t\tfs.access(foundryPath, fs.constants.X_OK, (error: any) => {\n\t\t\t\t\tresolve(!error);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic async getActiveNodes(): Promise<string[]> {\n\t\tthis.logger.logToOutput(\"Checking for active fork nodes\");\n\n\t\tconst activePorts: string[] = [];\n\t\tconst runningTasks = this.taskProvider.getRunningTasks();\n\n\t\tfor (const [taskId, execution] of runningTasks) {\n\t\t\tconst task = execution.task;\n\t\t\tconst definition = task.definition as CustomTaskDefinition;\n\n\t\t\tif (definition.command === \"fork\" && definition.port) {\n\t\t\t\tif (await this.isPortInUse(definition.port)) {\n\t\t\t\t\tactivePorts.push(definition.port);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logger.logToOutput(\n\t\t\t\t\t\t`Removing stale fork task ${taskId} - port ${definition.port} not in use`\n\t\t\t\t\t);\n\t\t\t\t\tthis.taskProvider.terminateTask(taskId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.logger.logToOutput(\n\t\t\t`Found ${activePorts.length} active fork nodes on ports: ${activePorts.join(\", \")}`\n\t\t);\n\t\treturn activePorts.sort((a, b) => parseInt(a) - parseInt(b));\n\t}\n\n\tpublic async forkNode(forkInfo: ForkInfo): Promise<ForkDetails> {\n\t\tthis.logger.logToOutput(\n\t\t\t`Attempting to fork node on port ${forkInfo.port} with URL: ${forkInfo.nodeUrl || \"local\"}`\n\t\t);\n\n\t\tconst inUse = await this.isPortInUse(forkInfo.port);\n\t\tif (!this.isFoundryProject || !this.workspaceRoot || inUse) {\n\t\t\tconst reason = !this.isFoundryProject\n\t\t\t\t? \"not a Foundry project\"\n\t\t\t\t: !this.workspaceRoot\n\t\t\t\t\t? \"no workspace\"\n\t\t\t\t\t: \"port already in use\";\n\t\t\tthis.logger.logToOutput(`Fork failed: ${reason}`);\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\taccounts: [],\n\t\t\t\tport: forkInfo.port.toString(),\n\t\t\t};\n\t\t}\n\n\t\ttry {\n\t\t\tconst definition: CustomTaskDefinition = {\n\t\t\t\ttype: \"foundry\",\n\t\t\t\tcommand: \"fork\",\n\t\t\t\ttaskId: forkInfo.tabId,\n\t\t\t\tport: forkInfo.port.toString(),\n\t\t\t\tnodeUrl: forkInfo.nodeUrl,\n\t\t\t};\n\n\t\t\tawait this.taskProvider.executeTask(definition);\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Fork task started, waiting for node to be ready on port ${forkInfo.port}`\n\t\t\t);\n\n\t\t\tconst success = await this.waitForNodeReady(forkInfo.port);\n\n\t\t\tif (success) {\n\t\t\t\tthis.logger.logToOutput(`Fork node successfully started on port ${forkInfo.port}`);\n\t\t\t} else {\n\t\t\t\tthis.logger.logToOutput(`Fork node failed to start on port ${forkInfo.port} - timeout`);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsuccess,\n\t\t\t\taccounts: [],\n\t\t\t\tport: forkInfo.port,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tthis.logger.logToOutput(`Error creating anvil instance: ${(error as Error).stack}`);\n\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t`$(error) Forge cockpit error creating anvil instance: ${(error as Error).message}`,\n\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.errorBackground\")\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\taccounts: [],\n\t\t\t\tport: forkInfo.port,\n\t\t\t};\n\t\t}\n\t}\n\n\tpublic async stopForkNode(port: string): Promise<boolean> {\n\t\ttry {\n\t\t\tthis.logger.logToOutput(`Stopping anvil node on port: ${port}`);\n\t\t\tconst stopped = await this.taskProvider.terminateTask(port);\n\t\t\tthis.logger.updateStatusBar(\n\t\t\t\t`$(check) Forge cockpit anvil node stopped on port: ${port}`,\n\t\t\t\tnew vscode.ThemeColor(\"statusBarItem.successBackground\")\n\t\t\t);\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.logger.updateStatusBar(\"$(check) Forge cockpit ready\");\n\t\t\t}, 2000);\n\t\t\treturn stopped;\n\t\t} catch (error) {\n\t\t\tthis.logger.logToOutput(`error stopping fork ${(error as Error).stack}`);\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async waitForNodeReady(port: string, maxAttempts = 100): Promise<boolean> {\n\t\tthis.logger.logToOutput(\n\t\t\t`Waiting for node to be ready on port ${port} (max ${maxAttempts} attempts)`\n\t\t);\n\n\t\treturn new Promise<boolean>(resolve => {\n\t\t\tlet attempts = 0;\n\t\t\tconst check = async () => {\n\t\t\t\tattempts++;\n\t\t\t\tthis.logger.logToOutput(\n\t\t\t\t\t`Waiting for node to be ready on port ${port} (current attempts ${attempts})`\n\t\t\t\t);\n\n\t\t\t\tif (await this.isPortInUse(port)) {\n\t\t\t\t\tthis.logger.logToOutput(`Node ready on port ${port} after ${attempts} attempts`);\n\t\t\t\t\tresolve(true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (attempts >= maxAttempts) {\n\t\t\t\t\tthis.logger.logToOutput(\n\t\t\t\t\t\t`Node failed to start on port ${port} - timeout after ${attempts} attempts`\n\t\t\t\t\t);\n\t\t\t\t\tresolve(false);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsetTimeout(check, 1000);\n\t\t\t};\n\t\t\tcheck();\n\t\t});\n\t}\n\n\tprivate async isPortInUse(port: string): Promise<boolean> {\n\t\treturn new Promise<boolean>(resolve => {\n\t\t\tconst socket = new net.Socket();\n\n\t\t\tsocket.once(\"connect\", () => {\n\t\t\t\tsocket.destroy();\n\t\t\t\tthis.logger.logToOutput(`Port ${port} is in use`);\n\t\t\t\tresolve(true);\n\t\t\t});\n\n\t\t\tsocket.once(\"error\", () => {\n\t\t\t\tthis.logger.logToOutput(`Port ${port} is not in use`);\n\t\t\t\tresolve(false);\n\t\t\t});\n\n\t\t\tsocket.connect(+port, \"127.0.0.1\");\n\t\t});\n\t}\n\n\tpublic async disposeForkTasks(): Promise<void> {\n\t\tawait this.taskProvider.terminateTaskByType(\"fork\");\n\t}\n\n\tpublic async closeAllTaskTerminals(): Promise<void> {\n\t\tawait this.taskProvider.closeAllTaskTerminals();\n\t}\n\n\tpublic getConfig(): Config {\n\t\treturn this.config;\n\t}\n\n\tpublic getSourceDirectory(): string {\n\t\treturn this.config?.srcDir || \"src\";\n\t}\n\n\tpublic isFoundry(): boolean {\n\t\treturn this.isFoundryProject;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.fileWatchers.forEach(watcher => watcher.dispose());\n\n\t\tif (this.debounceTimer) {\n\t\t\tclearTimeout(this.debounceTimer);\n\t\t}\n\n\t\tthis.taskProvider.dispose();\n\t\tthis.taskProviderDisposable?.dispose();\n\t\tthis.logger.dispose();\n\t\tthis._onDidBuildSucceed.dispose();\n\t}\n}\n","import * as vscode from \"vscode\";\nimport { CustomTaskDefinition } from \"../types\";\nimport { FoundryProjectController } from \"../controllers/forgeProjectController\";\nimport { ForgeCockpitCommand } from \"../utils\";\nimport { CockPitLogProvider } from \"./logProvider\";\n\nexport class FoundryTaskProvider implements vscode.TaskProvider {\n\tprivate tasks = new Map<string, vscode.Task>();\n\tprivate executions = new Map<string, vscode.TaskExecution>();\n\tprivate taskEndListener: vscode.Disposable;\n\n\tconstructor(\n\t\tprivate controller: FoundryProjectController,\n\t\tprivate logger: CockPitLogProvider\n\t) {\n\t\tthis.controller = controller;\n\t\tthis.taskEndListener = vscode.tasks.onDidEndTaskProcess(e => this.handleTaskEnd(e));\n\t}\n\n\tprivate handleTaskEnd(e: vscode.TaskProcessEndEvent): void {\n\t\tfor (const [taskId, execution] of this.executions) {\n\t\t\tif (e.execution === execution) {\n\t\t\t\tconst task = execution.task;\n\t\t\t\tconst definition = task.definition as CustomTaskDefinition;\n\t\t\t\tif (definition.command === \"fork\") {\n\t\t\t\t\tvscode.commands.executeCommand(ForgeCockpitCommand.GetActiveNodesCommand);\n\t\t\t\t\tthis.closeTaskTerminal(task.name);\n\t\t\t\t}\n\t\t\t\tthis.executions.delete(taskId);\n\t\t\t\tthis.tasks.delete(taskId);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprovideTasks(): Thenable<vscode.Task[]> | undefined {\n\t\treturn this.getFoundryTasks();\n\t}\n\n\tresolveTask(task: vscode.Task): vscode.Task | undefined {\n\t\tconst definition = task.definition as CustomTaskDefinition;\n\t\treturn definition.type === \"foundry\" ? this.createFoundryTask(definition) : undefined;\n\t}\n\n\tprivate async getFoundryTasks(): Promise<vscode.Task[]> {\n\t\tif (!this.controller.isFoundry()) {\n\t\t\treturn [];\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate createFoundryTask(definition: CustomTaskDefinition): vscode.Task {\n\t\tconst config = this.controller.getConfig();\n\t\tlet execution: vscode.ShellExecution;\n\t\tlet taskName: string;\n\n\t\tswitch (definition.command) {\n\t\t\tcase \"test\": {\n\t\t\t\tconst testArgs = [\"test\"];\n\t\t\t\tif (definition.testName) {\n\t\t\t\t\ttestArgs.push(\"--match-test\", definition.testName);\n\t\t\t\t}\n\t\t\t\tif (definition.contractFile) {\n\t\t\t\t\ttestArgs.push(\"--match-path\", definition.contractFile);\n\t\t\t\t}\n\t\t\t\tif (config.viaIR) {\n\t\t\t\t\ttestArgs.push(\"--via-ir\");\n\t\t\t\t}\n\t\t\t\ttestArgs.push(config.verbosity);\n\n\t\t\t\texecution = new vscode.ShellExecution(\"forge\", testArgs.filter(Boolean), {\n\t\t\t\t\tcwd: config.workspaceRoot.fsPath,\n\t\t\t\t});\n\n\t\t\t\ttaskName = `Foundry: Test ${definition.testName || \"All\"}`;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase \"fork\": {\n\t\t\t\tconst port = definition.port;\n\t\t\t\tconst nodeUrl = definition.nodeUrl || \"\";\n\n\t\t\t\tconst anvilArgs = [\"--port\", port, \"--auto-impersonate\"];\n\t\t\t\tif (nodeUrl) {\n\t\t\t\t\tanvilArgs.unshift(\"--fork-url\", nodeUrl);\n\t\t\t\t}\n\n\t\t\t\texecution = new vscode.ShellExecution(\"anvil\", anvilArgs, {\n\t\t\t\t\tcwd: config.workspaceRoot.fsPath,\n\t\t\t\t});\n\n\t\t\t\ttaskName = `Foundry: Fork ${nodeUrl || \"Local\"} (${port})`;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown foundry command: ${definition.command}`);\n\t\t}\n\n\t\tconst task = new vscode.Task(\n\t\t\tdefinition,\n\t\t\tvscode.TaskScope.Workspace,\n\t\t\ttaskName,\n\t\t\t\"foundry\",\n\t\t\texecution\n\t\t);\n\n\t\tif (definition.command === \"fork\") {\n\t\t\ttask.isBackground = true;\n\t\t\ttask.problemMatchers = [];\n\t\t\ttask.presentationOptions = {\n\t\t\t\treveal: vscode.TaskRevealKind.Never,\n\t\t\t\tfocus: false,\n\t\t\t\tpanel: vscode.TaskPanelKind.Dedicated,\n\t\t\t\tshowReuseMessage: false,\n\t\t\t\tclear: false,\n\t\t\t};\n\t\t} else {\n\t\t\ttask.group = vscode.TaskGroup.Test;\n\t\t\ttask.presentationOptions = {\n\t\t\t\treveal: vscode.TaskRevealKind.Always,\n\t\t\t\tfocus: true,\n\t\t\t\tpanel: vscode.TaskPanelKind.Dedicated,\n\t\t\t\tshowReuseMessage: false,\n\t\t\t\tclear: true,\n\t\t\t};\n\t\t}\n\n\t\tconst taskId = this.getTaskId(definition);\n\t\tthis.tasks.set(taskId, task);\n\t\treturn task;\n\t}\n\n\tpublic async executeTask(definition: CustomTaskDefinition): Promise<vscode.TaskExecution> {\n\t\tconst task = this.createFoundryTask(definition);\n\t\tconst execution = await vscode.tasks.executeTask(task);\n\t\tthis.executions.set(definition.port, execution);\n\t\treturn execution;\n\t}\n\n\tpublic async terminateTaskByType(forkType: string): Promise<void> {\n\t\tconst runningTasks = vscode.tasks.taskExecutions;\n\t\tfor (const execution of runningTasks) {\n\t\t\tconst task = execution.task;\n\t\t\tconst taskDef = task.definition as CustomTaskDefinition;\n\t\t\tif (taskDef.command === forkType) {\n\t\t\t\tawait this.terminateTask(taskDef.port);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async terminateTask(port: string): Promise<boolean> {\n\t\tconst execution = this.executions.get(port);\n\t\tif (execution) {\n\t\t\ttry {\n\t\t\t\tconst task = execution.task;\n\t\t\t\texecution.terminate();\n\t\t\t\tawait this.closeTaskTerminal(task.name);\n\n\t\t\t\tthis.executions.delete(port);\n\t\t\t\tthis.tasks.delete(port);\n\t\t\t\treturn true;\n\t\t\t} catch (error) {\n\t\t\t\tthis.logger.logToOutput(`Error disposing task ${port}:${error}`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tconst runningTasks = vscode.tasks.taskExecutions;\n\t\tfor (const execution of runningTasks) {\n\t\t\tconst task = execution.task;\n\t\t\tconst taskDef = task.definition as CustomTaskDefinition;\n\n\t\t\tif (taskDef.port === port) {\n\t\t\t\ttry {\n\t\t\t\t\texecution.terminate();\n\t\t\t\t\tawait this.closeTaskTerminal(task.name);\n\t\t\t\t\treturn true;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logger.logToOutput(`Error disposing task by port: ${error}`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (await this.terminateTaskByTerminal(port)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (await this.terminateTaskByProcess(port)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate async terminateTaskByTerminal(port: string): Promise<boolean> {\n\t\tconst terminals = vscode.window.terminals;\n\t\tfor (const terminal of terminals) {\n\t\t\tif (terminal.name.includes(port) || terminal.name.includes(`(${port})`)) {\n\t\t\t\tthis.logger.logToOutput(`Found terminal for port ${port}: ${terminal.name}`);\n\t\t\t\tterminal.dispose();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async terminateTaskByProcess(port: string): Promise<boolean> {\n\t\ttry {\n\t\t\tawait vscode.commands.executeCommand(ForgeCockpitCommand.TerminateAllTasksCommand);\n\t\t\tthis.logger.logToOutput(`Terminated all tasks as fallback for port ${port}`);\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tthis.logger.logToOutput(`Error terminating all tasks: ${error}`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic getRunningTasks(): Map<string, vscode.TaskExecution> {\n\t\treturn new Map(this.executions);\n\t}\n\n\tpublic isTaskRunning(taskId: string): boolean {\n\t\treturn this.executions.has(taskId);\n\t}\n\n\tprivate getTaskId(definition: CustomTaskDefinition): string {\n\t\tlet id = `foundry-${definition.command}`;\n\t\tif (definition.port) {\n\t\t\tid += `-${definition.port}`;\n\t\t}\n\t\tif (definition.testName) {\n\t\t\tid += `-${definition.testName}`;\n\t\t}\n\t\treturn id;\n\t}\n\n\tprivate async closeTaskTerminal(taskName: string): Promise<void> {\n\t\tconst terminals = vscode.window.terminals;\n\t\tfor (const terminal of terminals) {\n\t\t\tif (terminal.name === taskName || terminal.name.includes(taskName)) {\n\t\t\t\tterminal.dispose();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async closeAllTaskTerminals(): Promise<void> {\n\t\tconst terminals = vscode.window.terminals;\n\t\tfor (const terminal of terminals) {\n\t\t\tif (terminal.name.startsWith(\"Foundry:\") || terminal.name.includes(\"foundry\")) {\n\t\t\t\tterminal.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.taskEndListener.dispose();\n\t\tfor (const [, execution] of this.executions) {\n\t\t\tconst task = execution.task;\n\t\t\texecution.terminate();\n\t\t\tthis.closeTaskTerminal(task.name);\n\t\t}\n\t\tthis.executions.clear();\n\t\tthis.tasks.clear();\n\t}\n}\n","import * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport { Config, SingleTest, TestFile } from \"../types\";\nimport { CockPitLogProvider } from \"./logProvider\";\n\nexport class TestParserProvider {\n\tprivate functionRegex: RegExp = /function\\s+(test\\w*)\\s*\\(/g;\n\tprivate watcher: vscode.FileSystemWatcher | undefined;\n\tprivate _onDidChangeContracts: vscode.EventEmitter<TestFile[]> = new vscode.EventEmitter<\n\t\tTestFile[]\n\t>();\n\tprivate debounceTimer: NodeJS.Timeout | undefined;\n\tpublic readonly onDidChangeContracts: vscode.Event<TestFile[]> = this._onDidChangeContracts.event;\n\tpublic contracts: TestFile[] = [];\n\n\tconstructor(\n\t\tprivate config: Config,\n\t\tprivate logger: CockPitLogProvider\n\t) {}\n\n\tpublic async initialize(): Promise<void> {\n\t\tthis.contracts = [];\n\t\tif (!this.config.workspaceRoot) {\n\t\t\tthis.logger.logToOutput(\"Workspace root not defined. Please open a Foundry project.\");\n\t\t\tvscode.window.showErrorMessage(\"Workspace root not defined.\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst testDirUri = vscode.Uri.joinPath(this.config.workspaceRoot, this.config.testDir);\n\t\tconst solPattern = new vscode.RelativePattern(testDirUri, \"**/*.sol\");\n\t\tconst solFiles = await vscode.workspace.findFiles(solPattern);\n\n\t\tfor (const fileUri of solFiles) {\n\t\t\tconst fileName = path.basename(fileUri.fsPath);\n\t\t\tif (!this.isTestFile(fileName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst raw = await vscode.workspace.fs.readFile(fileUri);\n\t\t\t\tconst content = new TextDecoder().decode(raw);\n\t\t\t\tconst contractName = this.extractContractNameFromSource(content, fileName);\n\n\t\t\t\tconst singleTests = this.extractTestFunctionsFromSource(content).map(test => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...test,\n\t\t\t\t\t\tfilePath: fileUri.fsPath,\n\t\t\t\t\t\tcontractName,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tif (singleTests.length === 0 || !contractName) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst relativeToWorkspace = path\n\t\t\t\t\t.relative(this.config.workspaceRoot.fsPath, fileUri.fsPath)\n\t\t\t\t\t.replace(/\\\\/g, \"/\");\n\n\t\t\t\tthis.contracts.push({\n\t\t\t\t\tfileName: fileName,\n\t\t\t\t\tfilePath: relativeToWorkspace,\n\t\t\t\t\tisFolder: false,\n\t\t\t\t\ttests: singleTests,\n\t\t\t\t} as TestFile);\n\t\t\t} catch (error) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tthis.setupFileWatcher();\n\t}\n\n\tprivate extractContractNameFromSource(content: string, fallbackFileName: string): string {\n\t\tconst contractMatch = content.match(/contract\\s+(\\w+)(?:\\s+is\\s+.*?)?\\s*\\{/);\n\t\tif (contractMatch && contractMatch[1]) {\n\t\t\treturn contractMatch[1];\n\t\t}\n\t\treturn fallbackFileName.replace(/\\.sol$/, \"\");\n\t}\n\n\tprivate extractTestFunctionsFromSource(content: string): SingleTest[] {\n\t\treturn Array.from(content.matchAll(this.functionRegex), match => match[1]).map(testName => {\n\t\t\treturn {\n\t\t\t\ttestName: testName,\n\t\t\t\tcontractName: \"\",\n\t\t\t\tstatus: false,\n\t\t\t\tfilePath: \"\",\n\t\t\t} as SingleTest;\n\t\t});\n\t}\n\n\tprivate setupFileWatcher() {\n\t\tconst workspaceFolders = vscode.workspace.workspaceFolders;\n\t\tif (!workspaceFolders || workspaceFolders.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst pattern = new vscode.RelativePattern(\n\t\t\t\tworkspaceFolders[0],\n\t\t\t\t`${this.config.testDir}/**/*.t.sol`\n\t\t\t);\n\t\t\tthis.watcher = vscode.workspace.createFileSystemWatcher(pattern);\n\n\t\t\tthis.watcher.onDidCreate(() => this.triggerRefresh());\n\t\t\tthis.watcher.onDidChange(() => this.triggerRefresh());\n\t\t\tthis.watcher.onDidDelete(() => this.triggerRefresh());\n\t\t} catch (error) {}\n\t}\n\n\tpublic getIndividualTests(): SingleTest[] {\n\t\tconst singleTests: SingleTest[] = [];\n\t\tfor (const contract of this.contracts) {\n\t\t\tfor (const test of contract.tests) {\n\t\t\t\tsingleTests.push({\n\t\t\t\t\tcontractName: contract.fileName,\n\t\t\t\t\ttestName: test.testName,\n\t\t\t\t\tfilePath: contract.filePath,\n\t\t\t\t\tviaIR: false,\n\t\t\t\t\tstatus: false,\n\t\t\t\t} as SingleTest);\n\t\t\t}\n\t\t}\n\t\treturn singleTests;\n\t}\n\n\tprivate triggerRefresh() {\n\t\tif (this.debounceTimer) {\n\t\t\tclearTimeout(this.debounceTimer);\n\t\t}\n\t\tthis.debounceTimer = setTimeout(async () => {\n\t\t\tawait this.initialize();\n\t\t\tthis._onDidChangeContracts.fire(this.contracts);\n\t\t}, 1000);\n\t}\n\n\tpublic async refresh() {\n\t\tawait this.initialize();\n\t\tthis._onDidChangeContracts.fire(this.contracts);\n\t}\n\n\tprivate isTestFile(fileName: string): boolean {\n\t\treturn /^[^.\\\\/]+\\.t\\.sol$/.test(fileName);\n\t}\n\n\tdispose() {\n\t\tif (this.watcher) {\n\t\t\tthis.watcher.dispose();\n\t\t}\n\t\tif (this.debounceTimer) {\n\t\t\tclearTimeout(this.debounceTimer);\n\t\t}\n\t\tthis._onDidChangeContracts.dispose();\n\t}\n}\n","import * as vscode from \"vscode\";\nimport { FoundryProjectController } from \"../controllers/forgeProjectController\";\nimport { SingleTest, TestFile, Config, Test } from \"../types\";\nimport { CockPitLogProvider } from \"./logProvider\";\n\nexport class ForgeTestProvider {\n\tprivate testController: vscode.TestController;\n\tprivate testItems: Map<string, vscode.TestItem> = new Map();\n\tprivate testData: Map<string, Test> = new Map();\n\tprivate currentRun: vscode.TestRun | undefined;\n\tprivate currentCancellationTokenSource: vscode.CancellationTokenSource =\n\t\tnew vscode.CancellationTokenSource();\n\n\tconstructor(\n\t\tprivate contracts: TestFile[],\n\t\tprivate onDidChangeContracts: vscode.Event<TestFile[]>,\n\t\tprivate foundryController: FoundryProjectController,\n\t\tprivate logger: CockPitLogProvider\n\t) {\n\t\tthis.testController = vscode.tests.createTestController(\n\t\t\t\"forgeCockpitTests\",\n\t\t\t\"Forge cockpit Tests\"\n\t\t);\n\n\t\tthis.onDidChangeContracts((contracts: TestFile[]) => {\n\t\t\tthis.contracts = contracts;\n\t\t\tthis.refreshTests();\n\t\t});\n\n\t\tthis.testController.createRunProfile(\n\t\t\t\"Run Test\",\n\t\t\tvscode.TestRunProfileKind.Run,\n\t\t\t(request, token) => this.runHandler(request, token, false),\n\t\t\ttrue\n\t\t);\n\n\t\tthis.testController.createRunProfile(\n\t\t\t\"Run Test via IR\",\n\t\t\tvscode.TestRunProfileKind.Run,\n\t\t\t(request, token) => this.runHandler(request, token, true)\n\t\t);\n\n\t\tthis.testController.createRunProfile(\n\t\t\t\"Verbose\",\n\t\t\tvscode.TestRunProfileKind.Coverage,\n\t\t\t(request, token) => this.runHandler(request, token, false, \"-vvvvv\"),\n\t\t\tfalse\n\t\t);\n\n\t\tthis.refreshTests();\n\t}\n\n\tpublic resetTestStates(): void {\n\t\tthis.refreshTests();\n\t}\n\n\tpublic async stopTests(token: vscode.CancellationToken): Promise<void> {\n\t\tif (this.currentCancellationTokenSource) {\n\t\t\tthis.currentCancellationTokenSource.cancel();\n\t\t\tthis.currentCancellationTokenSource.dispose();\n\t\t}\n\n\t\tif (this.currentRun) {\n\t\t\tthis.currentRun.end();\n\t\t\tthis.currentRun = undefined;\n\t\t}\n\n\t\tif (this.testController.refreshHandler) {\n\t\t\tawait this.testController.refreshHandler(token);\n\t\t}\n\t}\n\n\tpublic async refreshTests(): Promise<void> {\n\t\tthis.clearAllTests();\n\t\tthis.buildTestStructure();\n\t}\n\n\tprivate clearAllTests(): void {\n\t\tthis.testController.items.forEach(item => this.disposeTestItem(item));\n\t\tthis.testController.items.replace([]);\n\t\tthis.testItems.clear();\n\t\tthis.testData.clear();\n\t\tthis.testController.invalidateTestResults();\n\t}\n\n\tprivate disposeTestItem(item: vscode.TestItem): void {\n\t\titem.children?.forEach(child => this.disposeTestItem(child));\n\t}\n\n\tprivate buildTestStructure(): void {\n\t\tconst rootItem = this.testController.createTestItem(\"test\", \"test\", vscode.Uri.file(\"test\"));\n\t\trootItem.canResolveChildren = true;\n\t\tthis.testItems.set(\"test\", rootItem);\n\t\tthis.testController.items.add(rootItem);\n\n\t\tthis.buildFolderStructure();\n\t\tthis.contracts.forEach(contract => this.addTestContract(contract));\n\t}\n\n\tprivate buildFolderStructure(): void {\n\t\tconst createdFolders = new Set<string>([\"test\"]);\n\n\t\tfor (const contract of this.contracts) {\n\t\t\tif (!contract.filePath) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst contractPath = contract.filePath.replace(/\\\\/g, \"/\");\n\t\t\tconst pathParts = contractPath.split(\"/\");\n\t\t\tlet currentPath = \"test\";\n\n\t\t\tfor (let i = 0; i < pathParts.length - 1; i++) {\n\t\t\t\tconst folderName = pathParts[i];\n\t\t\t\tconst newPath = `${currentPath}/${folderName}`;\n\n\t\t\t\tif (!createdFolders.has(newPath)) {\n\t\t\t\t\tconst parentItem = this.testItems.get(currentPath);\n\t\t\t\t\tif (parentItem) {\n\t\t\t\t\t\tconst folderItem = this.testController.createTestItem(\n\t\t\t\t\t\t\tnewPath,\n\t\t\t\t\t\t\tfolderName,\n\t\t\t\t\t\t\tvscode.Uri.file(newPath)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tfolderItem.canResolveChildren = true;\n\t\t\t\t\t\tparentItem.children.add(folderItem);\n\t\t\t\t\t\tthis.testItems.set(newPath, folderItem);\n\t\t\t\t\t\tcreatedFolders.add(newPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcurrentPath = newPath;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate addTestContract(contract: TestFile): void {\n\t\tif (!contract.filePath) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst contractPath = contract.filePath.replace(/\\\\/g, \"/\");\n\t\tconst pathParts = contractPath.split(\"/\");\n\t\tconst parentPath = pathParts.slice(0, pathParts.length - 1).join(\"/\");\n\t\tconst fullParentPath = parentPath ? `test/${parentPath}` : \"test\";\n\n\t\tconst parentItem = this.testItems.get(fullParentPath);\n\t\tif (!parentItem) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst workspaceRoot = this.foundryController.getConfig().workspaceRoot;\n\t\tconst contractUri = vscode.Uri.joinPath(workspaceRoot, contract.filePath);\n\t\tconst contractItem = this.testController.createTestItem(\n\t\t\tcontractPath,\n\t\t\tcontract.fileName,\n\t\t\tcontractUri\n\t\t);\n\n\t\tcontractItem.canResolveChildren = true;\n\t\tthis.testItems.set(contractPath, contractItem);\n\t\tparentItem.children.add(contractItem);\n\n\t\tif (contract.tests?.length > 0) {\n\t\t\tcontract.tests.forEach(test =>\n\t\t\t\tthis.addTestMethod(contractItem, contract.filePath, test, contractUri)\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate addTestMethod(\n\t\tcontractItem: vscode.TestItem,\n\t\tcontractPath: string,\n\t\ttest: SingleTest,\n\t\tcontractUri: vscode.Uri\n\t): void {\n\t\tconst testId = `${contractPath}:${test.testName}`;\n\t\tconst testItem = this.testController.createTestItem(testId, test.testName, contractUri);\n\n\t\tthis.testData.set(testId, {\n\t\t\tcontractName: contractPath,\n\t\t\ttestName: test.testName,\n\t\t});\n\t\tcontractItem.children.add(testItem);\n\t\tthis.testItems.set(testId, testItem);\n\t}\n\n\tprivate async runHandler(\n\t\trequest: vscode.TestRunRequest,\n\t\ttoken: vscode.CancellationToken,\n\t\tviaIR: boolean,\n\t\tverbose?: string\n\t): Promise<void> {\n\t\tthis.stopTests(token);\n\t\tthis.currentCancellationTokenSource = new vscode.CancellationTokenSource();\n\t\tthis.currentRun = this.testController.createTestRun(request);\n\t\tconst run = this.currentRun;\n\n\t\tconst testsToRun: vscode.TestItem[] = [];\n\n\t\tif (request.include) {\n\t\t\trequest.include.forEach(test => this.collectTestItems(test, testsToRun, request.exclude));\n\t\t} else {\n\t\t\tthis.testController.items.forEach(item =>\n\t\t\t\tthis.collectTestItems(item, testsToRun, request.exclude)\n\t\t\t);\n\t\t}\n\n\t\tconst totalTests = testsToRun.length;\n\t\trun.appendOutput(`Running ${totalTests} tests`);\n\t\tconst config: Config = {\n\t\t\t...this.foundryController.getConfig(),\n\t\t\tviaIR,\n\t\t\tverbosity: verbose || \"\",\n\t\t};\n\n\t\tif (totalTests === 0) {\n\t\t\trun.appendOutput(`No tests found to run.`);\n\t\t\tthis.logger.logToOutput(`No tests found to run.`);\n\t\t\trun.end();\n\t\t\tthis.currentRun = undefined;\n\t\t\tthis.currentCancellationTokenSource.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tthis.currentCancellationTokenSource.token.isCancellationRequested ||\n\t\t\ttoken.isCancellationRequested\n\t\t) {\n\t\t\trun.appendOutput(`Test execution cancelled.`);\n\t\t\tthis.logger.logToOutput(`Test execution cancelled.`);\n\t\t\trun.end();\n\t\t\tthis.currentRun = undefined;\n\t\t\tthis.currentCancellationTokenSource.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\ttestsToRun.forEach(test => {\n\t\t\tconst testInfo = this.testData.get(test.id);\n\t\t\tif (testInfo) {\n\t\t\t\trun.started(test);\n\t\t\t}\n\t\t});\n\n\t\ttry {\n\t\t\tif (testsToRun.length === 1) {\n\t\t\t\tconst testInfo = this.testData.get(testsToRun[0].id);\n\t\t\t\tif (!testInfo) {\n\t\t\t\t\trun.failed(testsToRun[0], new vscode.TestMessage(\"Test info not found\"));\n\t\t\t\t\trun.appendOutput(`Test failed: ${testsToRun[0].label} - Test info not found`);\n\t\t\t\t\tthis.logger.logToOutput(`Test failed: ${testsToRun[0].label} - Test info not found`);\n\t\t\t\t} else {\n\t\t\t\t\tconst results = await this.foundryController.runTest(\n\t\t\t\t\t\ttestInfo.contractName,\n\t\t\t\t\t\ttestInfo?.testName,\n\t\t\t\t\t\tconfig\n\t\t\t\t\t);\n\n\t\t\t\t\tif (results.success) {\n\t\t\t\t\t\trun.passed(testsToRun[0]);\n\t\t\t\t\t\tconst message = `Test passed: ${testInfo.testName}`;\n\t\t\t\t\t\trun.appendOutput(message);\n\t\t\t\t\t\tthis.logger.logToOutput(message);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trun.failed(\n\t\t\t\t\t\t\ttestsToRun[0],\n\t\t\t\t\t\t\tnew vscode.TestMessage(`Error running test ${results.error}`)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst message = `Test failed: ${testInfo.testName} - ${results.error}`;\n\t\t\t\t\t\trun.appendOutput(message);\n\t\t\t\t\t\tthis.logger.logToOutput(message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst results = await this.foundryController.runAllTests(config);\n\n\t\t\t\ttestsToRun.forEach(test => {\n\t\t\t\t\tconst testInfo = this.testData.get(test.id);\n\t\t\t\t\tif (!testInfo) {\n\t\t\t\t\t\trun.failed(test, new vscode.TestMessage(\"Test info not found\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst testFileName = test.id.split(\":\")[0]?.split(\"/\").pop();\n\t\t\t\t\tconst result = results.find(r => r.fileName === testFileName);\n\n\t\t\t\t\tif (result && result.success) {\n\t\t\t\t\t\trun.passed(test);\n\t\t\t\t\t\trun.appendOutput(`Test passed: ${testInfo.testName}`);\n\t\t\t\t\t\tthis.logger.logToOutput(`Test passed: ${testInfo.testName}`);\n\t\t\t\t\t} else if (result) {\n\t\t\t\t\t\trun.failed(\n\t\t\t\t\t\t\ttest,\n\t\t\t\t\t\t\tnew vscode.TestMessage(`Test failed: ${result.error || \"Test failed\"}`)\n\t\t\t\t\t\t);\n\t\t\t\t\t\trun.appendOutput(\n\t\t\t\t\t\t\t`Test failed: ${testInfo.testName} - ${result.error || \"Test failed\"}`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.logger.logToOutput(\n\t\t\t\t\t\t\t`Test failed: ${testInfo.testName} - ${result.error || \"Test failed\"}`\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trun.failed(test, new vscode.TestMessage(`Test not found in results`));\n\t\t\t\t\t\trun.appendOutput(`Test failed: ${testInfo.testName} - Test not found in results`);\n\t\t\t\t\t\tthis.logger.logToOutput(\n\t\t\t\t\t\t\t`Test failed: ${testInfo.testName} - Test not found in results`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\ttestsToRun.forEach(test => {\n\t\t\t\tconst testInfo = this.testData.get(test.id);\n\t\t\t\tif (!testInfo) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst message = new vscode.TestMessage(`Execution error: ${(error as Error).message}`);\n\t\t\t\trun.failed(test, message);\n\t\t\t\trun.appendOutput(`Test failed: ${testInfo.testName} - Execution error`);\n\t\t\t});\n\t\t\trun.appendOutput(`Test execution error: ${(error as Error).message}`);\n\t\t\tthis.logger.logToOutput(`Test execution error: ${(error as Error).stack}`);\n\t\t}\n\n\t\trun.appendOutput(`Test execution complete.`);\n\t\trun.end();\n\t\tthis.currentRun = undefined;\n\t\tthis.currentCancellationTokenSource.dispose();\n\t}\n\n\tprivate collectTestItems(\n\t\titem: vscode.TestItem,\n\t\tcollected: vscode.TestItem[],\n\t\texcluded?: readonly vscode.TestItem[]\n\t): void {\n\t\tif (excluded?.includes(item)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.testData.has(item.id)) {\n\t\t\tcollected.push(item);\n\t\t\treturn;\n\t\t}\n\n\t\titem.children?.forEach(child => this.collectTestItems(child, collected, excluded));\n\t}\n\n\tpublic runTest(test: SingleTest): void {\n\t\tconst testId = `${test.contractName}:${test.testName}`;\n\t\tconst testItem = this.testItems.get(testId);\n\n\t\tif (testItem) {\n\t\t\tconst request = new vscode.TestRunRequest([testItem]);\n\t\t\tthis.runHandler(request, new vscode.CancellationTokenSource().token, false);\n\t\t}\n\t}\n\n\tpublic runTestViaIR(test: SingleTest): void {\n\t\tconst testId = `${test.contractName}:${test.testName}`;\n\t\tconst testItem = this.testItems.get(testId);\n\n\t\tif (testItem) {\n\t\t\tconst request = new vscode.TestRunRequest([testItem]);\n\t\t\tthis.runHandler(request, new vscode.CancellationTokenSource().token, true);\n\t\t}\n\t}\n\n\tpublic runGroup(groupId: string): void {\n\t\tconst groupItem = this.testItems.get(groupId);\n\n\t\tif (groupItem) {\n\t\t\tconst request = new vscode.TestRunRequest([groupItem]);\n\t\t\tthis.runHandler(request, new vscode.CancellationTokenSource().token, false);\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.stopTests(this.currentCancellationTokenSource.token);\n\t\tthis.testController.dispose();\n\t}\n}\n","import __getWebviewHtml__ from '@tomjs/vite-plugin-vscode/webview';\nimport __getWebviewHtml__ from \"@tomjs/vite-plugin-vscode/webview\";\nimport {\n\tDisposable,\n\tWebview,\n\tWebviewPanel,\n\twindow,\n\tUri,\n\tViewColumn,\n\tcommands,\n\tenv,\n\tExtensionContext,\n} from \"vscode\";\nimport {\n\tTestFile,\n\tForkDetails,\n\tWalletBalancesInfo,\n\tFunctionCall,\n\tFunctionCallResponse,\n\tForkInfo,\n\tDeployContract,\n\tScriptResponse,\n\tAbiInputData,\n\tTransferTransaction,\n\tTransferResponse,\n} from \"../types\";\nimport {\n\tencodeFunction,\n\tForgeCockpitCommand,\n\tForgeCockPitResponseCommand,\n\tClipBoardTypeCommand,\n\tWebviewCommand,\n} from \"../utils\";\n\nexport class ForgeCockPitPanel {\n\tpublic static currentPanel: ForgeCockPitPanel | undefined;\n\tprivate readonly _panel: WebviewPanel;\n\tprivate _disposables: Disposable[] = [];\n\n\tprivate constructor(panel: WebviewPanel, context: ExtensionContext) {\n\t\tthis._panel = panel;\n\n\t\tthis._panel.onDidDispose(() => this.dispose(), null, this._disposables);\n\n\t\tthis._panel.webview.html = this._getWebviewContent(this._panel.webview, context);\n\n\t\tthis._setWebviewMessageListener(this._panel.webview);\n\t}\n\n\tpublic static render(context: ExtensionContext) {\n\t\tif (ForgeCockPitPanel.currentPanel) {\n\t\t\tForgeCockPitPanel.currentPanel._panel.reveal(ViewColumn.One);\n\t\t} else {\n\t\t\tconst panel = window.createWebviewPanel(\"showForgeCockPit\", \"Forge CockPit\", ViewColumn.One, {\n\t\t\t\tretainContextWhenHidden: true,\n\t\t\t\tenableScripts: true,\n\t\t\t\tlocalResourceRoots: [\n\t\t\t\t\tUri.joinPath(context.extensionUri, \"out\"),\n\t\t\t\t\tUri.joinPath(context.extensionUri, \"dist\"),\n\t\t\t\t],\n\t\t\t});\n\n\t\t\tForgeCockPitPanel.currentPanel = new ForgeCockPitPanel(panel, context);\n\t\t}\n\t}\n\tpublic static isVisible(): boolean {\n\t\treturn ForgeCockPitPanel.currentPanel?._panel.active ?? false;\n\t}\n\n\tpublic static exists(): boolean {\n\t\treturn ForgeCockPitPanel.currentPanel !== undefined;\n\t}\n\tpublic dispose() {\n\t\tForgeCockPitPanel.currentPanel = undefined;\n\n\t\tthis._panel.dispose();\n\n\t\twhile (this._disposables.length) {\n\t\t\tconst disposable = this._disposables.pop();\n\t\t\tif (disposable) {\n\t\t\t\tdisposable.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getWebviewContent(webview: Webview, context: ExtensionContext): string {\n\t\treturn __getWebviewHtml__({\n\t\t\tserverUrl: process.env.VITE_DEV_SERVER_URL,\n\t\t\twebview,\n\t\t\tcontext,\n\t\t\tinjectCode: `<script>window.__FLAG1__=666;window.__FLAG2__=888;</script>`,\n\t\t});\n\t}\n\n\tprivate _setWebviewMessageListener(webview: Webview) {\n\t\twebview.onDidReceiveMessage(\n\t\t\tasync (message: any) => {\n\t\t\t\tconst command = message.command;\n\t\t\t\tconst payload = this.toSafePayload(message.payload);\n\n\t\t\t\tswitch (command) {\n\t\t\t\t\tcase WebviewCommand.GetActiveNodesCommand:\n\t\t\t\t\t\tawait ForgeCockPitPanel.sendActiveNodes(command);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase WebviewCommand.StopNodeCommand:\n\t\t\t\t\t\tconst stopped = (await commands.executeCommand(\n\t\t\t\t\t\t\tForgeCockpitCommand.StopNodeCommand,\n\t\t\t\t\t\t\tpayload\n\t\t\t\t\t\t)) as boolean;\n\t\t\t\t\t\tForgeCockPitPanel.currentPanel?._panel.webview.postMessage({\n\t\t\t\t\t\t\ttype: ForgeCockPitResponseCommand.StopNodeResponse,\n\t\t\t\t\t\t\tpayload: stopped,\n\t\t\t\t\t\t\tpreviousType: command.toString(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WebviewCommand.DeployContractCommand:\n\t\t\t\t\t\tconst contractInfo = payload as DeployContract;\n\t\t\t\t\t\tconst DeployedContract = await commands.executeCommand(\n\t\t\t\t\t\t\tForgeCockpitCommand.DeployContractCommand,\n\t\t\t\t\t\t\tcontractInfo\n\t\t\t\t\t\t);\n\t\t\t\t\t\tForgeCockPitPanel.currentPanel?._panel.webview.postMessage({\n\t\t\t\t\t\t\ttype: ForgeCockPitResponseCommand.DeployContractResponse,\n\t\t\t\t\t\t\tpayload: DeployedContract,\n\t\t\t\t\t\t\tpreviousType: command.toString(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WebviewCommand.WalletBalancesCommand:\n\t\t\t\t\t\tconst walletInfo = payload as WalletBalancesInfo;\n\t\t\t\t\t\tconst balances = (await commands.executeCommand(\n\t\t\t\t\t\t\tForgeCockpitCommand.WalletBalancesCommand,\n\t\t\t\t\t\t\twalletInfo\n\t\t\t\t\t\t)) as string[];\n\t\t\t\t\t\tForgeCockPitPanel.currentPanel?._panel.webview.postMessage({\n\t\t\t\t\t\t\ttype: ForgeCockPitResponseCommand.WalletBalancesResponse,\n\t\t\t\t\t\t\tpayload: balances,\n\t\t\t\t\t\t\tpreviousType: command.toString(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WebviewCommand.ExecuteFunctionCommand:\n\t\t\t\t\t\tconst transaction = payload as FunctionCall;\n\t\t\t\t\t\tconst response = (await commands.executeCommand(\n\t\t\t\t\t\t\tForgeCockpitCommand.ExecuteFunctionCommand,\n\t\t\t\t\t\t\ttransaction\n\t\t\t\t\t\t)) as FunctionCallResponse;\n\t\t\t\t\t\tForgeCockPitPanel.currentPanel?._panel.webview.postMessage({\n\t\t\t\t\t\t\ttype: ForgeCockPitResponseCommand.ExecuteFunctionResponse,\n\t\t\t\t\t\t\tpayload: response,\n\t\t\t\t\t\t\tpreviousType: transaction.caller,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase WebviewCommand.TransferCommand:\n\t\t\t\t\t\tconst balanceResponse = (await commands.executeCommand(\n\t\t\t\t\t\t\tForgeCockpitCommand.TransferCommand,\n\t\t\t\t\t\t\tpayload as TransferTransaction\n\t\t\t\t\t\t)) as TransferResponse;\n\t\t\t\t\t\tForgeCockPitPanel.currentPanel?._panel.webview.postMessage({\n\t\t\t\t\t\t\ttype: ForgeCockPitResponseCommand.TransferResponse,\n\t\t\t\t\t\t\tpayload: JSON.stringify(balanceResponse),\n\t\t\t\t\t\t\tpreviousType: command.toString(),\n\t\t\t\t\t\t\tpreviousPayload: payload,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ClipBoardTypeCommand.ReadWalletImportCommand:\n\t\t\t\t\tcase ClipBoardTypeCommand.ReadClipboardWalletCommand:\n\t\t\t\t\tcase ClipBoardTypeCommand.ReadClipboardDeploymentCommand:\n\t\t\t\t\tcase ClipBoardTypeCommand.ReadClipboardAnvilCommand:\n\t\t\t\t\tcase ClipBoardTypeCommand.ReadClipboardConstructorArgsCommand:\n\t\t\t\t\tcase ClipBoardTypeCommand.ReadClipboardFunctionInputCommand:\n\t\t\t\t\tcase ClipBoardTypeCommand.ReadClipboardEncoderCommand:\n\t\t\t\t\tcase ClipBoardTypeCommand.ReadTransferCommand:\n\t\t\t\t\tcase ClipBoardTypeCommand.ReadClipboard:\n\t\t\t\t\t\tconst text = await env.clipboard.readText();\n\t\t\t\t\t\twindow.showInformationMessage(`Read from clipboard ${JSON.stringify(text)}`);\n\t\t\t\t\t\tForgeCockPitPanel.currentPanel?._panel.webview.postMessage({\n\t\t\t\t\t\t\ttype: ForgeCockPitResponseCommand.ClipboardContentResponse,\n\t\t\t\t\t\t\tpayload: JSON.stringify(text),\n\t\t\t\t\t\t\tpreviousType: command.toString(),\n\t\t\t\t\t\t\tpreviousPayload: payload,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase WebviewCommand.WriteClipboardCommand:\n\t\t\t\t\t\twindow.showInformationMessage(\"Copied to Clipboard\");\n\t\t\t\t\t\tawait env.clipboard.writeText(JSON.stringify(payload));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase WebviewCommand.RunScriptCommand:\n\t\t\t\t\t\tconst scriptResults = (await commands.executeCommand(\n\t\t\t\t\t\t\tForgeCockpitCommand.RunScriptCommand,\n\t\t\t\t\t\t\tpayload as DeployContract\n\t\t\t\t\t\t)) as ScriptResponse;\n\t\t\t\t\t\tForgeCockPitPanel.currentPanel?._panel.webview.postMessage({\n\t\t\t\t\t\t\ttype: ForgeCockPitResponseCommand.RunScriptResponse,\n\t\t\t\t\t\t\tpayload: JSON.stringify(scriptResults),\n\t\t\t\t\t\t\tpreviousType: command.toString(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase WebviewCommand.StopNodeCommand:\n\t\t\t\t\t\tcommands.executeCommand(ForgeCockpitCommand.StopNodeCommand, payload);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase WebviewCommand.OpenLinkCommand:\n\t\t\t\t\t\tcommands.executeCommand(ForgeCockpitCommand.OpenUrlCommand, payload);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase WebviewCommand.AbiEncodeCommand:\n\t\t\t\t\t\tconst input = payload as AbiInputData;\n\t\t\t\t\t\tconst encoded = encodeFunction(input);\n\t\t\t\t\t\tForgeCockPitPanel.currentPanel?._panel.webview.postMessage({\n\t\t\t\t\t\t\ttype: ForgeCockPitResponseCommand.AbiEncodeResponse,\n\t\t\t\t\t\t\tpayload: JSON.stringify(encoded),\n\t\t\t\t\t\t\tpreviousType: command.toString(),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase WebviewCommand.RefreshContractsCommand:\n\t\t\t\t\tcase WebviewCommand.LoadContractsCommand:\n\t\t\t\t\t\tcommands.executeCommand(ForgeCockpitCommand.RefreshTestsCommand);\n\t\t\t\t\t\tcommands.executeCommand(ForgeCockpitCommand.LoadCockPitWalletsCommand);\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase WebviewCommand.ForkNodeCommand:\n\t\t\t\t\t\tconst results = (await commands.executeCommand(\n\t\t\t\t\t\t\tForgeCockpitCommand.ForkNodeCommand,\n\t\t\t\t\t\t\tpayload as ForkInfo\n\t\t\t\t\t\t)) as ForkDetails;\n\t\t\t\t\t\tconst result = {\n\t\t\t\t\t\t\t...results,\n\t\t\t\t\t\t\ttabId: payload,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tForgeCockPitPanel.currentPanel?._panel.webview.postMessage({\n\t\t\t\t\t\t\ttype: ForgeCockPitResponseCommand.ForkNodeResultsResponse,\n\t\t\t\t\t\t\tpayload: result,\n\t\t\t\t\t\t\tpreviousType: \"\",\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\twindow.showInformationMessage(message);\n\t\t\t\t}\n\t\t\t},\n\t\t\tundefined,\n\t\t\tthis._disposables\n\t\t);\n\t}\n\tpublic static sendDefaultWallets(command: string, wallets: string[]) {\n\t\tif (ForgeCockPitPanel.currentPanel) {\n\t\t\tForgeCockPitPanel.currentPanel?._panel.webview.postMessage({\n\t\t\t\ttype: ForgeCockPitResponseCommand.GetDefaultWalletsResponse,\n\t\t\t\tpayload: wallets,\n\t\t\t\tpreviousType: command.toString(),\n\t\t\t});\n\t\t}\n\t}\n\tpublic static sendContracts(contracts: TestFile[]) {\n\t\tif (ForgeCockPitPanel.currentPanel) {\n\t\t\tForgeCockPitPanel.currentPanel._panel.webview.postMessage({\n\t\t\t\ttype: ForgeCockPitResponseCommand.SetContractsResponse,\n\t\t\t\tpayload: contracts,\n\t\t\t});\n\t\t}\n\t}\n\tpublic static async sendActiveNodes(command: any) {\n\t\tif (ForgeCockPitPanel.currentPanel) {\n\t\t\tconst nodes = await commands.executeCommand(ForgeCockpitCommand.GetActiveNodesCommand);\n\t\t\tForgeCockPitPanel.currentPanel?._panel.webview.postMessage({\n\t\t\t\ttype: ForgeCockPitResponseCommand.GetActiveNodesResponse,\n\t\t\t\tpayload: nodes as string[],\n\t\t\t\tpreviousType: command.toString(),\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate toSafePayload(payload: any): string | Object {\n\t\tif (typeof payload === \"string\") {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(payload);\n\t\t\t} catch (e) {\n\t\t\t\treturn payload;\n\t\t\t}\n\t\t}\n\t\treturn payload;\n\t}\n}\n","import * as vscode from \"vscode\";\nimport { CockPitActionItem } from \"../items/cockPitItem\";\nimport { ForgeCockpitCommand } from \"../utils\";\n\nexport class CockPitActionsProvider implements vscode.TreeDataProvider<CockPitActionItem> {\n\tprivate _onDidChangeTreeData: vscode.EventEmitter<CockPitActionItem | undefined | null | void> =\n\t\tnew vscode.EventEmitter<CockPitActionItem | undefined | null | void>();\n\treadonly onDidChangeTreeData: vscode.Event<CockPitActionItem | undefined | null | void> =\n\t\tthis._onDidChangeTreeData.event;\n\n\trefresh(): void {\n\t\tthis._onDidChangeTreeData.fire();\n\t}\n\n\tgetTreeItem(element: CockPitActionItem): vscode.TreeItem {\n\t\treturn element;\n\t}\n\n\tgetChildren(element?: CockPitActionItem): Thenable<CockPitActionItem[]> {\n\t\tif (element) {\n\t\t\treturn Promise.resolve([]);\n\t\t}\n\n\t\tconst items: CockPitActionItem[] = [];\n\n\t\titems.push(\n\t\t\tnew CockPitActionItem(\n\t\t\t\t\"Open Cockpit\",\n\t\t\t\t\"Open the Forge Cockpit panel\",\n\t\t\t\t{\n\t\t\t\t\tcommand: ForgeCockpitCommand.ShowForgeCockPitCommand,\n\t\t\t\t\ttitle: \"Open Cockpit\",\n\t\t\t\t},\n\t\t\t\t\"play\"\n\t\t\t),\n\t\t\tnew CockPitActionItem(\n\t\t\t\t\"Clear Cockpit Cache\",\n\t\t\t\t\"Clear Forge Cockpit cache\",\n\t\t\t\t{\n\t\t\t\t\tcommand: ForgeCockpitCommand.ClearCacheCommand,\n\t\t\t\t\ttitle: \"Clear Cache\",\n\t\t\t\t},\n\t\t\t\t\"notebook-delete-cell\"\n\t\t\t)\n\t\t);\n\n\t\treturn Promise.resolve(items);\n\t}\n}\n","import * as vscode from \"vscode\";\n\nexport class CockPitActionItem extends vscode.TreeItem {\n\tconstructor(\n\t\tpublic readonly label: string,\n\t\tpublic readonly tooltip: string,\n\t\tpublic readonly command: vscode.Command,\n\t\ticonName: string\n\t) {\n\t\tsuper(label, vscode.TreeItemCollapsibleState.None);\n\t\tthis.tooltip = tooltip;\n\t\tthis.command = command;\n\t\tthis.iconPath = new vscode.ThemeIcon(iconName);\n\t}\n}\n","import * as vscode from \"vscode\";\nimport { FoundryProjectController } from \"../controllers/forgeProjectController\";\nimport { TestFile } from \"../types\";\nimport { CockPitLogProvider } from \"./logProvider\";\n\nexport class AbiProvider {\n\tpublic abis: TestFile[] = [];\n\tprivate watcher: vscode.FileSystemWatcher | undefined;\n\tprivate _onDidChangeAbis: vscode.EventEmitter<void> = new vscode.EventEmitter<void>();\n\tpublic readonly onDidChangeAbis: vscode.Event<void> = this._onDidChangeAbis.event;\n\tprivate debounceTimer: NodeJS.Timeout | undefined;\n\n\tconstructor(\n\t\tprivate readonly foundryProjectController: FoundryProjectController,\n\t\tprivate readonly logger: CockPitLogProvider\n\t) {}\n\n\tinitialize() {\n\t\tthis.logger.updateStatusBar(\n\t\t\t\"$(beaker~spin) Forge cockpit loading ABIs\",\n\t\t\tnew vscode.ThemeColor(\"statusBarItem.successBackground\")\n\t\t);\n\t\tthis.setupFileWatcher();\n\t\tthis.foundryProjectController.onDidBuildSucceed(() => {\n\t\t\tthis.refresh();\n\t\t});\n\t\tthis.logger.updateStatusBar(\n\t\t\t\"$(check) Forge cockpit ready\",\n\t\t\tnew vscode.ThemeColor(\"statusBarItem.successBackground\")\n\t\t);\n\t}\n\n\tprivate async loadAbis() {\n\t\ttry {\n\t\t\tthis.abis = await this.foundryProjectController.getAllContractABIs();\n\t\t} catch (error) {}\n\t}\n\n\tprivate setupFileWatcher() {\n\t\tconst workspaceFolders = vscode.workspace.workspaceFolders;\n\t\tif (!workspaceFolders || workspaceFolders.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst outputDir = this.foundryProjectController.getConfig().outputDir || \"out\";\n\n\t\ttry {\n\t\t\tconst pattern = new vscode.RelativePattern(workspaceFolders[0], `${outputDir}/**/*.json`);\n\n\t\t\tthis.watcher = vscode.workspace.createFileSystemWatcher(pattern);\n\n\t\t\tthis.watcher.onDidCreate(() => this.triggerRefresh(\"create\"));\n\t\t\tthis.watcher.onDidChange(() => this.triggerRefresh(\"change\"));\n\t\t\tthis.watcher.onDidDelete(() => this.triggerRefresh(\"delete\"));\n\n\t\t\tconsole.log(`Output watcher set up for ${outputDir}/**/*.json`);\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error setting up file watcher:\", error);\n\t\t}\n\t}\n\n\tprivate triggerRefresh(source: string) {\n\t\tif (this.debounceTimer) {\n\t\t\tclearTimeout(this.debounceTimer);\n\t\t}\n\n\t\tthis.debounceTimer = setTimeout(async () => {\n\t\t\tawait this.loadAbis();\n\t\t\tthis._onDidChangeAbis.fire();\n\t\t}, 1000);\n\t}\n\n\tpublic async refresh() {\n\t\tawait this.loadAbis();\n\t\tthis._onDidChangeAbis.fire();\n\t}\n\n\tpublic async triggerBuild() {\n\t\tawait this.foundryProjectController.triggerBuild();\n\t}\n\n\tdispose() {\n\t\tif (this.watcher) {\n\t\t\tthis.watcher.dispose();\n\t\t}\n\n\t\tif (this.debounceTimer) {\n\t\t\tclearTimeout(this.debounceTimer);\n\t\t}\n\n\t\tthis.foundryProjectController.dispose();\n\t\tthis._onDidChangeAbis.dispose();\n\t}\n}\n","import * as vscode from \"vscode\";\nimport { ABI, ContractPattern, EventInfo, StateVariable } from \"../types\";\nimport { CockPitLogProvider } from \"./logProvider\";\nimport path from \"path\";\n\nexport class StubTestProvider {\n\tprivate readonly contractName: string;\n\tprivate readonly abi: ABI;\n\tprivate readonly logger: CockPitLogProvider;\n\tprivate sourceCode = \"\";\n\tprivate readonly dependencies = new Set<string>();\n\tprivate readonly events = new Map<string, EventInfo[]>();\n\tprivate readonly stateVariables = new Map<string, StateVariable>();\n\tprivate readonly abiEvents = new Map<string, any>();\n\tprivate readonly errors = new Map<string, any>();\n\n\tprivate readonly patterns: ContractPattern[] = [\n\t\t{\n\t\t\tname: \"foundry-uups\",\n\t\t\tdetect: (code, abi) =>\n\t\t\t\tcode.includes(\"openzeppelin-foundry-upgrades\") &&\n\t\t\t\t(code.includes(\"UUPS\") || this.hasInitializer(abi)),\n\t\t\ttemplate: {\n\t\t\t\timports: 'import {UnsafeUpgrades} from \"openzeppelin-foundry-upgrades/Upgrades.sol\";',\n\t\t\t\tdeclarations: \"address public proxy;\",\n\t\t\t\tsetup: `proxy = UnsafeUpgrades.deployUUPSProxy(\\n            address(new {{CONTRACT}}()),\\n            {{INIT_DATA}}\\n        );\\n        {{CONTRACT_VAR}} = {{CONTRACT}}(proxy);`,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"foundry-transparent\",\n\t\t\tdetect: (code, abi) =>\n\t\t\t\tcode.includes(\"openzeppelin-foundry-upgrades\") && code.includes(\"Transparent\"),\n\t\t\ttemplate: {\n\t\t\t\timports: 'import {UnsafeUpgrades} from \"openzeppelin-foundry-upgrades/Upgrades.sol\";',\n\t\t\t\tdeclarations: \"address public proxy;\",\n\t\t\t\tsetup: `proxy = UnsafeUpgrades.deployTransparentProxy(\\n            address(new {{CONTRACT}}()),\\n            address(this),\\n            {{INIT_DATA}}\\n        );\\n        {{CONTRACT_VAR}} = {{CONTRACT}}(proxy);`,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"erc1967-proxy\",\n\t\t\tdetect: (code, abi) =>\n\t\t\t\t(code.includes(\"upgradeable\") || code.includes(\"proxy\") || this.hasInitializer(abi)) &&\n\t\t\t\t!code.includes(\"foundry-upgrades\"),\n\t\t\ttemplate: {\n\t\t\t\timports: 'import \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";',\n\t\t\t\tdeclarations: \"ERC1967Proxy public proxy;\\n    address public implementation;\",\n\t\t\t\tsetup: `implementation = address(new {{CONTRACT}}());\n        proxy = new ERC1967Proxy(implementation, {{INIT_DATA}});\n        {{CONTRACT_VAR}} = {{CONTRACT}}(address(proxy));`,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"regular\",\n\t\t\tdetect: () => true,\n\t\t\ttemplate: {\n\t\t\t\timports: \"\",\n\t\t\t\tdeclarations: \"\",\n\t\t\t\tsetup: \"{{CONTRACT_VAR}} = new {{CONTRACT}}({{CONSTRUCTOR_PARAMS}});\",\n\t\t\t},\n\t\t},\n\t];\n\n\tprivate readonly baseTemplate = `// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"forge-std/Test.sol\";\nimport \"src/{{CONTRACT}}.sol\";{{DEPENDENCY_IMPORTS}}{{PATTERN_IMPORTS}}\n\ncontract {{CONTRACT}}Test is Test {\n    {{CONTRACT}} public {{CONTRACT_VAR}};{{DEPENDENCY_DECLARATIONS}}{{PATTERN_DECLARATIONS}}\n    \n    uint256 constant INITIAL_BALANCE = 100 ether;\n    address public constant ALICE = address(0xA11CE);\n    address public constant BOB = address(0xB0B);\n    address public constant CHARLIE = address(0xC4A4);\n    address public constant DAVE = address(0xDA5E);\n\n    function setUp() public {\n        vm.deal(ALICE, INITIAL_BALANCE);\n        vm.deal(BOB, INITIAL_BALANCE);\n        vm.deal(CHARLIE, INITIAL_BALANCE);\n        vm.deal(DAVE, INITIAL_BALANCE);\n        \n        vm.label(ALICE, \"Alice\");\n        vm.label(BOB, \"Bob\");\n        vm.label(CHARLIE, \"Charlie\");\n        vm.label(DAVE, \"Dave\");\n        \n        vm.startPrank(BOB);\n{{DEPENDENCY_SETUP}}        {{PATTERN_SETUP}}\n        vm.stopPrank();\n    }\n{{TESTS}}{{FUZZ_TESTS}}\n}\n`;\n\n\tconstructor(contractName: string, abi: ABI, logger: CockPitLogProvider) {\n\t\tthis.contractName = contractName;\n\t\tthis.abi = abi;\n\t\tthis.logger = logger;\n\t\tthis.findDependencies();\n\t\tthis.extractAbiEvents();\n\t\tthis.extractAbiErrors();\n\t}\n\n\tpublic async generateTestFile(filePath: string): Promise<void> {\n\t\ttry {\n\t\t\tconst workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n\t\t\tif (!workspaceFolder) {\n\t\t\t\tthrow new Error(\"No workspace folder found.\");\n\t\t\t}\n\t\t\tconst absolutePath = path.join(workspaceFolder.uri.fsPath, filePath);\n\t\t\tconst sourceCode = await vscode.workspace.fs.readFile(vscode.Uri.file(absolutePath));\n\t\t\tthis.sourceCode = Buffer.from(sourceCode).toString(\"utf8\");\n\n\t\t\tthis.extractStateVariables();\n\t\t\tthis.mapFunctionEvents();\n\n\t\t\tconst content = this.renderTemplate();\n\t\t\tconst document = await vscode.workspace.openTextDocument({\n\t\t\t\tcontent,\n\t\t\t\tlanguage: \"solidity\",\n\t\t\t});\n\t\t\tawait vscode.window.showTextDocument(document);\n\t\t\tthis.logger.logToOutput(`Generated test file for ${this.contractName}`);\n\t\t} catch (error) {\n\t\t\tthis.logger.logToOutput(`Error generating test file: ${(error as Error).stack}`);\n\t\t}\n\t}\n\n\tprivate extractAbiEvents(): void {\n\t\tconst eventItems = this.abi.filter(item => item.type === \"event\");\n\t\tfor (const event of eventItems) {\n\t\t\tif (event.name) {\n\t\t\t\tthis.abiEvents.set(event.name, event);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate extractAbiErrors(): void {\n\t\tconst errorItems = this.abi.filter(item => item.type === \"error\");\n\t\tfor (const error of errorItems) {\n\t\t\tif (error.name) {\n\t\t\t\tthis.errors.set(error.name, error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate extractStateVariables(): void {\n\t\tif (!this.sourceCode) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stateVarRegex =\n\t\t\t/(?:uint256|uint\\d*|int256|int\\d*|bool|address|string|bytes\\d*|mapping\\([^)]+\\)|struct\\s+\\w+|\\w+)\\s+(public|private|internal|constant|immutable)\\s+(\\w+)(?:\\s*=\\s*[^;]+)?;/g;\n\n\t\tlet match;\n\t\twhile ((match = stateVarRegex.exec(this.sourceCode)) !== null) {\n\t\t\tconst type = match[0].split(/\\s+/)[0];\n\t\t\tconst visibility = match[1];\n\t\t\tconst name = match[2];\n\n\t\t\tthis.stateVariables.set(name, {\n\t\t\t\tname,\n\t\t\t\ttype,\n\t\t\t\tvisibility,\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate mapFunctionEvents(): void {\n\t\tif (!this.sourceCode) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst functionRegex = /function\\s+(\\w+)\\s*\\([^)]*\\)\\s*[^{]*\\{([^{}]*(?:\\{[^{}]*\\}[^{}]*)*)\\}/g;\n\n\t\tlet match;\n\t\twhile ((match = functionRegex.exec(this.sourceCode)) !== null) {\n\t\t\tconst functionName = match[1];\n\t\t\tconst functionBody = match[2];\n\n\t\t\tconst emittedEvents = this.extractEmittedEvents(functionBody);\n\t\t\tif (emittedEvents.length > 0) {\n\t\t\t\tthis.events.set(functionName, emittedEvents);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate extractEmittedEvents(functionBody: string): EventInfo[] {\n\t\tconst events: EventInfo[] = [];\n\t\tconst emitRegex = /emit\\s+(\\w+)\\s*\\(([^)]*)\\)/g;\n\n\t\tlet match;\n\t\twhile ((match = emitRegex.exec(functionBody)) !== null) {\n\t\t\tconst eventName = match[1];\n\n\t\t\tconst abiEvent = this.abiEvents.get(eventName);\n\t\t\tif (abiEvent) {\n\t\t\t\tconst eventInfo: EventInfo = {\n\t\t\t\t\tname: eventName,\n\t\t\t\t\tsignature: this.buildEventSignature(abiEvent),\n\t\t\t\t\tindexed:\n\t\t\t\t\t\tabiEvent.inputs\n\t\t\t\t\t\t\t?.filter((input: any) => input.indexed)\n\t\t\t\t\t\t\t.map((input: any) => input.name) || [],\n\t\t\t\t\tnonIndexed:\n\t\t\t\t\t\tabiEvent.inputs\n\t\t\t\t\t\t\t?.filter((input: any) => !input.indexed)\n\t\t\t\t\t\t\t.map((input: any) => input.name) || [],\n\t\t\t\t\tinputs: abiEvent.inputs || [],\n\t\t\t\t};\n\t\t\t\tevents.push(eventInfo);\n\t\t\t}\n\t\t}\n\n\t\treturn events;\n\t}\n\n\tprivate buildEventSignature(event: any): string {\n\t\tif (!event.inputs || event.inputs.length === 0) {\n\t\t\treturn `${event.name}()`;\n\t\t}\n\n\t\tconst paramTypes = event.inputs.map((input: any) => input.type).join(\",\");\n\t\treturn `${event.name}(${paramTypes})`;\n\t}\n\n\tprivate analyzeFunction(func: any): {\n\t\tmodifiesState: boolean;\n\t\taccessesState: string[];\n\t\tmodifiesVariables: string[];\n\t\thasEvents: boolean;\n\t\teventCount: number;\n\t\tisPayable: boolean;\n\t\tcanRevert: boolean;\n\t} {\n\t\tconst functionName = func.name;\n\t\tconst functionEvents = this.events.get(functionName) || [];\n\n\t\tlet modifiesState = false;\n\t\tlet accessesState: string[] = [];\n\t\tlet modifiesVariables: string[] = [];\n\t\tlet canRevert = false;\n\n\t\tif (this.sourceCode && functionName) {\n\t\t\tconst functionBodyMatch = this.sourceCode.match(\n\t\t\t\tnew RegExp(\n\t\t\t\t\t`function\\\\s+${functionName}\\\\s*\\\\([^)]*\\\\)\\\\s*[^{]*\\\\{([^{}]*(?:\\\\{[^{}]*\\\\}[^{}]*)*)\\\\}`,\n\t\t\t\t\t\"g\"\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tif (functionBodyMatch && functionBodyMatch[0]) {\n\t\t\t\tconst functionBody = functionBodyMatch[0];\n\n\t\t\t\tfor (const [varName, varInfo] of this.stateVariables) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tfunctionBody.includes(`${varName} =`) ||\n\t\t\t\t\t\tfunctionBody.includes(`${varName}++`) ||\n\t\t\t\t\t\tfunctionBody.includes(`${varName}--`) ||\n\t\t\t\t\t\tfunctionBody.includes(`++${varName}`) ||\n\t\t\t\t\t\tfunctionBody.includes(`--${varName}`) ||\n\t\t\t\t\t\tfunctionBody.includes(`${varName}[`) ||\n\t\t\t\t\t\tfunctionBody.includes(`${varName}.`)\n\t\t\t\t\t) {\n\t\t\t\t\t\tmodifiesState = true;\n\t\t\t\t\t\tmodifiesVariables.push(varName);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (functionBody.includes(varName)) {\n\t\t\t\t\t\taccessesState.push(varName);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcanRevert =\n\t\t\t\t\tfunctionBody.includes(\"require(\") ||\n\t\t\t\t\tfunctionBody.includes(\"revert(\") ||\n\t\t\t\t\tfunctionBody.includes(\"assert(\") ||\n\t\t\t\t\tfunctionBody.includes(\"_revert\");\n\t\t\t}\n\t\t}\n\n\t\tif (!modifiesState) {\n\t\t\tmodifiesState = func.stateMutability !== \"view\" && func.stateMutability !== \"pure\";\n\t\t}\n\n\t\treturn {\n\t\t\tmodifiesState,\n\t\t\taccessesState: [...new Set(accessesState)],\n\t\t\tmodifiesVariables: [...new Set(modifiesVariables)],\n\t\t\thasEvents: functionEvents.length > 0,\n\t\t\teventCount: functionEvents.length,\n\t\t\tisPayable: func.stateMutability === \"payable\",\n\t\t\tcanRevert,\n\t\t};\n\t}\n\n\tprivate renderTemplate(): string {\n\t\tconst pattern = this.detectPattern();\n\t\tconst context = this.buildContext(pattern);\n\t\treturn this.replaceTokens(this.baseTemplate, context);\n\t}\n\n\tprivate detectPattern(): ContractPattern {\n\t\treturn this.patterns.find(p => p.detect(this.sourceCode, this.abi)) || this.patterns[3];\n\t}\n\n\tprivate buildContext(pattern: ContractPattern): Record<string, string> {\n\t\treturn {\n\t\t\tCONTRACT: this.contractName,\n\t\t\tCONTRACT_VAR: this.contractName.toLowerCase(),\n\t\t\tDEPENDENCY_IMPORTS: this.renderDependencyImports(),\n\t\t\tDEPENDENCY_DECLARATIONS: this.renderDependencyDeclarations(),\n\t\t\tDEPENDENCY_SETUP: this.renderDependencySetup(),\n\t\t\tPATTERN_IMPORTS: pattern.template.imports ? `\\n${pattern.template.imports}` : \"\",\n\t\t\tPATTERN_DECLARATIONS: pattern.template.declarations\n\t\t\t\t? `\\n    ${pattern.template.declarations}`\n\t\t\t\t: \"\",\n\t\t\tPATTERN_SETUP: this.replaceTokens(pattern.template.setup, {\n\t\t\t\tCONTRACT: this.contractName,\n\t\t\t\tCONTRACT_VAR: this.contractName.toLowerCase(),\n\t\t\t\tINIT_DATA: this.getInitData(),\n\t\t\t\tCONSTRUCTOR_PARAMS: this.getConstructorParams(),\n\t\t\t}),\n\t\t\tTESTS: this.renderTests(),\n\t\t\tFUZZ_TESTS: this.renderFuzzTests(),\n\t\t};\n\t}\n\n\tprivate replaceTokens(template: string, context: Record<string, string>): string {\n\t\treturn Object.entries(context).reduce(\n\t\t\t(result, [key, value]) => result.replace(new RegExp(`{{${key}}}`, \"g\"), value),\n\t\t\ttemplate\n\t\t);\n\t}\n\n\tprivate hasInitializer(abi: ABI): boolean {\n\t\treturn abi.some(item => item.name === \"initialize\");\n\t}\n\n\tprivate findDependencies(): void {\n\t\tconst initMethods = this.abi.filter(\n\t\t\titem => item.type === \"constructor\" || item.name === \"initialize\"\n\t\t);\n\n\t\tfor (const method of initMethods) {\n\t\t\tif (!method.inputs) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const input of method.inputs) {\n\t\t\t\tconst contractName = this.extractContractName(input);\n\t\t\t\tif (contractName && contractName !== this.contractName) {\n\t\t\t\t\tthis.dependencies.add(contractName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate extractContractName(input: any): string | null {\n\t\tif (input.internalType?.includes(\"contract \")) {\n\t\t\tconst match = input.internalType.match(/contract\\s+([^\\s]+)/);\n\t\t\treturn match?.[1] || null;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate renderDependencyImports(): string {\n\t\tconst imports = Array.from(this.dependencies)\n\t\t\t.map(dep => `import \"src/${dep}.sol\";`)\n\t\t\t.join(\"\\n\");\n\t\treturn imports ? `\\n${imports}` : \"\";\n\t}\n\n\tprivate renderDependencyDeclarations(): string {\n\t\tif (this.dependencies.size === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tconst declarations = Array.from(this.dependencies)\n\t\t\t.map(dep => `${dep} public ${dep.toLowerCase()};`)\n\t\t\t.join(\"\\n    \");\n\n\t\treturn `\\n    ${declarations}`;\n\t}\n\n\tprivate renderDependencySetup(): string {\n\t\tif (this.dependencies.size === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tconst setup = Array.from(this.dependencies)\n\t\t\t.map(dep => `        ${dep.toLowerCase()} = new ${dep}();`)\n\t\t\t.join(\"\\n\");\n\n\t\treturn `${setup}\\n`;\n\t}\n\n\tprivate getInitData(): string {\n\t\tconst initializer = this.abi.find(item => item.name === \"initialize\");\n\t\treturn initializer?.inputs?.length\n\t\t\t? `abi.encodeCall(${this.contractName}.initialize, (${this.buildParamList(initializer.inputs)}))`\n\t\t\t: '\"\"';\n\t}\n\n\tprivate getConstructorParams(): string {\n\t\tconst constructor = this.abi.find(item => item.type === \"constructor\");\n\t\treturn constructor?.inputs ? this.buildParamList(constructor.inputs) : \"\";\n\t}\n\n\tprivate buildParamList(inputs: any[]): string {\n\t\treturn inputs\n\t\t\t.map(input => {\n\t\t\t\tconst contractName = this.extractContractName(input);\n\t\t\t\tif (contractName && this.dependencies.has(contractName)) {\n\t\t\t\t\treturn contractName.toLowerCase();\n\t\t\t\t}\n\t\t\t\treturn this.getDefaultValue(input);\n\t\t\t})\n\t\t\t.join(\", \");\n\t}\n\n\tprivate getDefaultValue(input: any): string {\n\t\tconst type = input.type;\n\n\t\tif (this.isStructType(input)) {\n\t\t\treturn this.buildStructLiteral(input);\n\t\t}\n\n\t\tif (type?.startsWith(\"uint\")) {\n\t\t\tconst bitSize = parseInt(type.replace(\"uint\", \"\")) || 256;\n\t\t\treturn bitSize <= 8 ? \"1\" : \"100\";\n\t\t}\n\n\t\tif (type?.startsWith(\"int\")) {\n\t\t\treturn \"1\";\n\t\t}\n\n\t\tif (type === \"bool\") {\n\t\t\treturn \"true\";\n\t\t}\n\t\tif (type === \"address\") {\n\t\t\treturn \"address(0x1)\";\n\t\t}\n\t\tif (type === \"string\") {\n\t\t\treturn '\"test\"';\n\t\t}\n\t\tif (type === \"bytes\") {\n\t\t\treturn '\"0x01\"';\n\t\t}\n\t\tif (type?.startsWith(\"bytes\") && type !== \"bytes\") {\n\t\t\treturn '\"0x01\"';\n\t\t}\n\n\t\tif (type?.endsWith(\"[]\")) {\n\t\t\tconst baseType = type.replace(/\\[\\]$/, \"\");\n\t\t\treturn `new ${baseType}[](0)`;\n\t\t}\n\n\t\tif (type?.match(/\\[\\d+\\]$/)) {\n\t\t\tconst match = type.match(/(.+)\\[(\\d+)\\]$/);\n\t\t\tif (match) {\n\t\t\t\tconst baseType = match[1];\n\t\t\t\tconst size = parseInt(match[2]);\n\t\t\t\tconst defaultVal = this.getDefaultValue({ type: baseType });\n\t\t\t\treturn `[${Array(Math.min(size, 3)).fill(defaultVal).join(\", \")}${size > 3 ? \", ...\" : \"\"}]`;\n\t\t\t}\n\t\t}\n\n\t\tif (type?.startsWith(\"enum \")) {\n\t\t\treturn \"0\";\n\t\t}\n\n\t\treturn \"0\";\n\t}\n\n\tprivate isStructType(input: any): boolean {\n\t\treturn input?.type === \"tuple\";\n\t}\n\n\tprivate buildStructLiteral(input: any): string {\n\t\tconst structName = this.getStructName(input);\n\n\t\tif (!input.components?.length) {\n\t\t\treturn `${this.contractName}.${structName}({})`;\n\t\t}\n\n\t\tconst fields = input.components\n\t\t\t.map((comp: any) => `${comp.name}: ${this.getDefaultValue(comp)}`)\n\t\t\t.join(\", \");\n\n\t\treturn `${this.contractName}.${structName}({${fields}})`;\n\t}\n\n\tprivate getStructName(input: any): string {\n\t\tif (input.internalType?.includes(\"struct\")) {\n\t\t\tconst match = input.internalType.match(/struct\\s+(?:[^.]+\\.)?([^.\\[\\]\\s]+)/);\n\t\t\tif (match?.[1]) {\n\t\t\t\treturn match[1];\n\t\t\t}\n\t\t}\n\n\t\tif (this.sourceCode && input.name) {\n\t\t\tconst pascalName = this.toPascalCase(input.name);\n\t\t\tconst structPattern = new RegExp(`struct\\\\s+${pascalName}\\\\s*{`, \"g\");\n\t\t\tif (structPattern.test(this.sourceCode)) {\n\t\t\t\treturn pascalName;\n\t\t\t}\n\n\t\t\tconst structMatches = this.sourceCode.match(/struct\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*{/g);\n\t\t\tif (structMatches) {\n\t\t\t\tfor (const structMatch of structMatches) {\n\t\t\t\t\tconst structName = structMatch.match(/struct\\s+([A-Za-z_][A-Za-z0-9_]*)/)?.[1];\n\t\t\t\t\tif (structName && structName.toLowerCase() === input.name.toLowerCase()) {\n\t\t\t\t\t\treturn structName;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (structMatches.length > 0) {\n\t\t\t\t\tconst firstStruct = structMatches[0].match(/struct\\s+([A-Za-z_][A-Za-z0-9_]*)/)?.[1];\n\t\t\t\t\tif (firstStruct) {\n\t\t\t\t\t\treturn firstStruct;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn input.name ? this.toPascalCase(input.name) : \"TestStruct\";\n\t}\n\n\tprivate renderTests(): string {\n\t\tconst functions = this.abi.filter(\n\t\t\titem =>\n\t\t\t\titem.type === \"function\" &&\n\t\t\t\titem.name &&\n\t\t\t\titem.name !== \"initialize\" &&\n\t\t\t\t!this.isStateVariableGetter(item)\n\t\t);\n\n\t\tlet allTests = \"\";\n\n\t\tfor (const func of functions) {\n\t\t\tallTests += this.renderSingleTest(func);\n\t\t\tallTests += this.renderRevertTests(func);\n\t\t}\n\n\t\treturn allTests;\n\t}\n\n\tprivate isStateVariableGetter(func: any): boolean {\n\t\tif (!this.sourceCode || func.stateMutability !== \"view\" || func.inputs?.length !== 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn (\n\t\t\tthis.stateVariables.has(func.name) &&\n\t\t\tthis.stateVariables.get(func.name)?.visibility === \"public\"\n\t\t);\n\t}\n\n\tprivate renderSingleTest(func: any): string {\n\t\tconst name = this.toPascalCase(func.name);\n\t\tconst params = this.buildParamList(func.inputs || []);\n\t\tconst isView = func.stateMutability === \"view\" || func.stateMutability === \"pure\";\n\t\tconst analysis = this.analyzeFunction(func);\n\n\t\tif (isView && func.outputs?.length) {\n\t\t\tconst output = func.outputs[0];\n\t\t\tconst outputType = this.getType(output);\n\t\t\tconst assertion = this.generateViewAssertion(output, \"result\", analysis);\n\n\t\t\treturn `\n    function test_${name}() public view {\n        ${outputType} result = ${this.contractName.toLowerCase()}.${func.name}(${params});\n        ${assertion}\n    }\n`;\n\t\t}\n\n\t\tconst eventAssertions = this.generateEventAssertions(func.name);\n\t\tconst stateAssertions = this.generateStateAssertions(analysis);\n\n\t\treturn `\n    function test_${name}() public {\n        // Change caller as needed (ALICE, BOB, CHARLIE, DAVE)\n        vm.startPrank(BOB);\n        ${eventAssertions.setup}\n        ${this.contractName.toLowerCase()}.${func.name}${analysis.isPayable ? \"{value: 1 ether}\" : \"\"}(${params});\n        vm.stopPrank();\n        ${eventAssertions.assertions}\n        ${stateAssertions}\n    }\n`;\n\t}\n\n\tprivate generateEventAssertions(functionName: string): { setup: string; assertions: string } {\n\t\tconst functionEvents = this.events.get(functionName);\n\t\tif (!functionEvents || functionEvents.length === 0) {\n\t\t\treturn { setup: \"\", assertions: \"\" };\n\t\t}\n\n\t\tconst setup = \"vm.recordLogs();\";\n\t\tconst assertions = functionEvents\n\t\t\t.map((event, index) => {\n\t\t\t\tlet eventAssertions = `Vm.Log[] memory logs = vm.getRecordedLogs();\n        assertGe(logs.length, ${index + 1});\n        assertEq(logs[${index}].topics[0], keccak256(\"${event.signature}\"));`;\n\n\t\t\t\tif (event.indexed.length > 0) {\n\t\t\t\t\teventAssertions += `\\n        /// @dev Verify indexed parameters: ${event.indexed.join(\", \")}`;\n\t\t\t\t}\n\n\t\t\t\tif (event.nonIndexed.length > 0) {\n\t\t\t\t\teventAssertions += `\\n        /// @dev Decode and verify non-indexed parameters: ${event.nonIndexed.join(\", \")}`;\n\t\t\t\t}\n\n\t\t\t\treturn eventAssertions;\n\t\t\t})\n\t\t\t.join(\"\\n        \");\n\n\t\treturn { setup, assertions };\n\t}\n\n\tprivate generateViewAssertion(output: any, varName: string, analysis: any): string {\n\t\tconst type = output.type;\n\n\t\tif (type?.startsWith(\"uint\") || type?.startsWith(\"int\")) {\n\t\t\treturn `assertTrue(${varName} >= 0 || ${varName} < 0);`;\n\t\t}\n\n\t\tif (type === \"bool\") {\n\t\t\treturn `assertTrue(${varName}) || assertFalse(${varName});`;\n\t\t}\n\n\t\tif (type === \"address\") {\n\t\t\treturn `assertTrue(${varName} != address(0) || ${varName} == address(0));`;\n\t\t}\n\n\t\tif (type === \"string\") {\n\t\t\treturn `assertTrue(bytes(${varName}).length >= 0);`;\n\t\t}\n\n\t\tif (this.isStructType(output)) {\n\t\t\tconst structName = this.getStructName(output);\n\t\t\tif (output.components && output.components.length > 0) {\n\t\t\t\tconst fieldChecks = output.components\n\t\t\t\t\t.map((comp: any) => `assertTrue(true);`)\n\t\t\t\t\t.join(\"\\n        \");\n\t\t\t\treturn fieldChecks;\n\t\t\t}\n\t\t\treturn `assertTrue(true);`;\n\t\t}\n\n\t\tif (type?.endsWith(\"[]\")) {\n\t\t\treturn `assertTrue(${varName}.length >= 0);`;\n\t\t}\n\n\t\treturn `assertTrue(true);`;\n\t}\n\n\tprivate generateStateAssertions(analysis: any): string {\n\t\tif (!analysis.modifiesState && !analysis.hasEvents) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tlet assertions: string[] = [];\n\n\t\tif (analysis.modifiesVariables.length > 0) {\n\t\t\tfor (const varName of analysis.modifiesVariables) {\n\t\t\t\tconst varInfo = this.stateVariables.get(varName);\n\t\t\t\tif (varInfo && varInfo.visibility === \"public\") {\n\t\t\t\t\tassertions.push(`assertTrue(true);`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn assertions.length > 0 ? assertions.join(\"\\n        \") : \"\";\n\t}\n\n\tprivate renderRevertTests(func: any): string {\n\t\tconst analysis = this.analyzeFunction(func);\n\t\tif (!analysis.canRevert) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tconst name = this.toPascalCase(func.name);\n\t\tconst params = this.buildParamList(func.inputs || []);\n\t\tconst modifiers = this.extractFunctionModifiers(func.name);\n\n\t\tlet revertTests = \"\";\n\n\t\tif (modifiers.length > 0) {\n\t\t\trevertTests += modifiers\n\t\t\t\t.map(modifier => {\n\t\t\t\t\tconst modifierTest = this.generateModifierFailureTest(modifier);\n\t\t\t\t\treturn `\n    function test_RevertWhen_${name}_${this.toPascalCase(modifier)}Fails() public {\n        vm.startPrank(ALICE);\n        ${modifierTest.setup}\n        vm.expectRevert(${modifierTest.expectedError});\n        ${this.contractName.toLowerCase()}.${func.name}(${params});\n        vm.stopPrank();\n    }`;\n\t\t\t\t})\n\t\t\t\t.join(\"\");\n\t\t}\n\n\t\tif (func.inputs && func.inputs.length > 0) {\n\t\t\tconst zeroParams = func.inputs\n\t\t\t\t.map((input: any) => {\n\t\t\t\t\tif (input.type === \"address\") {\n\t\t\t\t\t\treturn \"address(0)\";\n\t\t\t\t\t}\n\t\t\t\t\tif (input.type?.startsWith(\"uint\") || input.type?.startsWith(\"int\")) {\n\t\t\t\t\t\treturn \"0\";\n\t\t\t\t\t}\n\t\t\t\t\tif (input.type === \"string\") {\n\t\t\t\t\t\treturn '\"\"';\n\t\t\t\t\t}\n\t\t\t\t\tif (input.type === \"bytes\") {\n\t\t\t\t\t\treturn '\"\"';\n\t\t\t\t\t}\n\t\t\t\t\tif (input.type === \"bool\") {\n\t\t\t\t\t\treturn \"false\";\n\t\t\t\t\t}\n\t\t\t\t\treturn this.getDefaultValue(input);\n\t\t\t\t})\n\t\t\t\t.join(\", \");\n\n\t\t\trevertTests += `\n    function test_RevertWhen_${name}_InvalidInput() public {\n        vm.startPrank(ALICE);\n        vm.expectRevert();\n        ${this.contractName.toLowerCase()}.${func.name}(${zeroParams});\n        vm.stopPrank();\n    }`;\n\t\t}\n\n\t\treturn revertTests;\n\t}\n\n\tprivate generateModifierFailureTest(modifier: string): { setup: string; expectedError: string } {\n\t\tif (this.sourceCode) {\n\t\t\tconst modifierDefMatch = this.sourceCode.match(\n\t\t\t\tnew RegExp(\n\t\t\t\t\t`modifier\\\\s+${modifier}\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{([^{}]*(?:\\\\{[^{}]*\\\\}[^{}]*)*)\\\\}`,\n\t\t\t\t\t\"g\"\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tif (modifierDefMatch && modifierDefMatch[0]) {\n\t\t\t\tconst modifierBody = modifierDefMatch[0];\n\n\t\t\t\tconst customErrorMatch = modifierBody.match(/revert\\s+(\\w+)\\s*\\(/);\n\t\t\t\tif (customErrorMatch && this.errors.has(customErrorMatch[1])) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsetup: \"\",\n\t\t\t\t\t\texpectedError: `${this.contractName}.${customErrorMatch[1]}.selector`,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tconst requireMatch = modifierBody.match(/require\\([^,)]+,\\s*\"([^\"]+)\"/);\n\t\t\t\tif (requireMatch) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsetup: \"\",\n\t\t\t\t\t\texpectedError: `\"${requireMatch[1]}\"`,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (modifierBody.includes(\"msg.sender\") || modifierBody.includes(\"owner\")) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsetup: \"vm.startPrank(address(0xdead));\",\n\t\t\t\t\t\texpectedError: 'bytes(\"\")',\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (modifierBody.includes(\"block.timestamp\") || modifierBody.includes(\"block.number\")) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsetup: \"\",\n\t\t\t\t\t\texpectedError: 'bytes(\"\")',\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: \"\",\n\t\t\texpectedError: 'bytes(\"\")',\n\t\t};\n\t}\n\n\tprivate extractFunctionModifiers(functionName: string): string[] {\n\t\tif (!this.sourceCode) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst regex = new RegExp(`function\\\\s+${functionName}\\\\s*\\\\([^)]*\\\\)\\\\s*([^{]*?)\\\\s*{`, \"gm\");\n\n\t\tconst match = regex.exec(this.sourceCode);\n\t\tif (!match) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst declaration = match[1].trim();\n\t\tif (!declaration) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst withoutReturns = declaration.replace(/returns\\s*\\([^)]*\\)/gi, \"\").trim();\n\t\tconst words = withoutReturns.split(/\\s+/).filter(w => w.length > 0);\n\n\t\tconst solidityKeywords = new Set([\n\t\t\t\"public\",\n\t\t\t\"private\",\n\t\t\t\"internal\",\n\t\t\t\"external\",\n\t\t\t\"pure\",\n\t\t\t\"view\",\n\t\t\t\"payable\",\n\t\t\t\"nonpayable\",\n\t\t\t\"virtual\",\n\t\t\t\"override\",\n\t\t]);\n\n\t\tconst potentialModifiers = words\n\t\t\t.map(word => word.replace(/\\([^)]*\\)$/, \"\"))\n\t\t\t.filter(word => !solidityKeywords.has(word) && word.length > 0)\n\t\t\t.filter(word => this.isModifierDefined(word));\n\n\t\treturn [...new Set(potentialModifiers)];\n\t}\n\n\tprivate isModifierDefined(modifierName: string): boolean {\n\t\tif (!this.sourceCode) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst modifierDefRegex = new RegExp(`modifier\\\\s+${modifierName}\\\\s*\\\\([^)]*\\\\)\\\\s*{`, \"gm\");\n\t\treturn modifierDefRegex.test(this.sourceCode);\n\t}\n\n\tprivate renderFuzzTests(): string {\n\t\tconst functions = this.abi.filter(\n\t\t\titem =>\n\t\t\t\titem.type === \"function\" &&\n\t\t\t\titem.inputs?.length &&\n\t\t\t\titem.name &&\n\t\t\t\titem.name !== \"initialize\" &&\n\t\t\t\t!this.isStateVariableGetter(item)\n\t\t);\n\n\t\tif (functions.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\treturn `\n\n    function testFuzz_FunctionCall(address caller) public {\n        vm.assume(caller != address(0));\n        vm.startPrank(caller);\n        assertTrue(true);\n        vm.stopPrank();\n    }`;\n\t}\n\n\tprivate renderFuzzTest(func: any): string {\n\t\tconst name = this.toPascalCase(func.name);\n\t\tconst params = func.inputs\n\t\t\t.map((input: any, i: number) => {\n\t\t\t\tconst type = this.getType(input);\n\t\t\t\tconst paramName = input.name || `param${i}`;\n\t\t\t\treturn `${type} ${paramName}`;\n\t\t\t})\n\t\t\t.join(\", \");\n\n\t\tconst callParams = func.inputs\n\t\t\t.map((input: any, i: number) => input.name || `param${i}`)\n\t\t\t.join(\", \");\n\n\t\tconst analysis = this.analyzeFunction(func);\n\t\tconst modifier = analysis.isPayable ? \"payable \" : \"\";\n\t\tconst boundAssumptions = this.generateFuzzAssumptions(func.inputs);\n\n\t\treturn `\n    function testFuzz_${name}(${params}) public ${modifier}{\n        ${boundAssumptions}\n        ${this.contractName.toLowerCase()}.${func.name}(${callParams});\n        assertTrue(true);\n    }`;\n\t}\n\n\tprivate generateFuzzAssumptions(inputs: any[]): string {\n\t\tconst assumptions = inputs.map((input, i) => {\n\t\t\tconst paramName = input.name || `param${i}`;\n\t\t\tconst type = input.type;\n\n\t\t\tif (type === \"address\") {\n\t\t\t\treturn `vm.assume(${paramName} != address(0));`;\n\t\t\t}\n\n\t\t\tif (type?.startsWith(\"uint\")) {\n\t\t\t\treturn `vm.assume(${paramName} > 0);`;\n\t\t\t}\n\n\t\t\tif (type?.startsWith(\"int\")) {\n\t\t\t\treturn `vm.assume(${paramName} != 0);`;\n\t\t\t}\n\n\t\t\treturn `vm.assume(true);`;\n\t\t});\n\n\t\treturn assumptions.length > 0 ? assumptions.join(\"\\n        \") + \"\\n\" : \"\";\n\t}\n\n\tprivate getType(param: any): string {\n\t\tif (!param?.type) {\n\t\t\treturn \"unknown\";\n\t\t}\n\n\t\tif (this.isStructType(param)) {\n\t\t\tconst structName = this.getStructName(param);\n\t\t\treturn `${this.contractName}.${structName} memory`;\n\t\t}\n\n\t\tif (param.type === \"string\" || param.type === \"bytes\" || param.type.endsWith(\"[]\")) {\n\t\t\treturn `${param.type} memory`;\n\t\t}\n\n\t\treturn param.type;\n\t}\n\n\tprivate toPascalCase(str: string): string {\n\t\treturn str ? str.charAt(0).toUpperCase() + str.slice(1) : \"\";\n\t}\n}\n","import {\n\thttp,\n\tcreatePublicClient,\n\tformatEther,\n\tcreateWalletClient,\n\tTransactionReceipt,\n\tdefineChain,\n\tparseEther,\n\tPublicClient,\n} from \"viem\";\nimport {\n\tDeployContract,\n\tDeployedContract,\n\tEncodeResponse,\n\tFunctionCall,\n\tFunctionCallResponse,\n\tTransferResponse,\n\tTransferTransaction,\n} from \"../types\";\nimport { CockPitLogProvider } from \"./logProvider\";\nimport { safeStringify } from \"../utils\";\n\nexport class WalletProvider {\n\tprivate publicClient: PublicClient;\n\tconstructor(\n\t\tprivate rpcUrl: string,\n\t\tprivate logger: CockPitLogProvider\n\t) {\n\t\t//@ts-ignore\n\t\tthis.publicClient = createPublicClient({\n\t\t\ttransport: http(this.rpcUrl),\n\t\t});\n\t}\n\n\tasync getBalances(wallets: string[]): Promise<string[]> {\n\t\ttry {\n\t\t\tconst balances = await Promise.all(\n\t\t\t\twallets.map(address =>\n\t\t\t\t\tthis.publicClient.getBalance({\n\t\t\t\t\t\taddress: address as `0x${string}`,\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tconst formattedBalances = balances.map(balance => formatEther(balance).toString());\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Balances retrieved: ${wallets.length} wallets: ${formattedBalances.join(\", \")} ETH`\n\t\t\t);\n\n\t\t\treturn formattedBalances;\n\t\t} catch (error: any) {\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Balance fetch failed: ${wallets.length} wallets - ${(error as Error).stack}`\n\t\t\t);\n\t\t\treturn Array(wallets.length).fill(\"0\");\n\t\t}\n\t}\n\n\tprivate createChain(nodeUrl: string, chainId: number) {\n\t\treturn defineChain({\n\t\t\tid: chainId,\n\t\t\tname: \"Forge Cockpit\",\n\t\t\tnativeCurrency: {\n\t\t\t\tdecimals: 18,\n\t\t\t\tname: \"Ether\",\n\t\t\t\tsymbol: \"ETH\",\n\t\t\t},\n\t\t\trpcUrls: {\n\t\t\t\tdefault: {\n\t\t\t\t\thttp: [nodeUrl],\n\t\t\t\t\twebSocket: [],\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async executeFunction(callInfo: FunctionCall): Promise<FunctionCallResponse> {\n\t\ttry {\n\t\t\tconst chainId = await this.publicClient.getChainId();\n\n\t\t\tconst walletClient = createWalletClient({\n\t\t\t\tchain: this.createChain(callInfo.nodeUrl, chainId),\n\t\t\t\ttransport: http(callInfo.nodeUrl),\n\t\t\t});\n\n\t\t\tif (callInfo.staticCall) {\n\t\t\t\tconst data = await this.publicClient.readContract({\n\t\t\t\t\taddress: callInfo.contractAddress as `0x${string}`,\n\t\t\t\t\tabi: callInfo.abi,\n\t\t\t\t\tfunctionName: callInfo.functionName,\n\t\t\t\t\targs: callInfo.params,\n\t\t\t\t});\n\n\t\t\t\tthis.logger.logToOutput(\n\t\t\t\t\t`Read call successful: ${callInfo.functionName}(${JSON.stringify(callInfo.params)}) -> ${callInfo.contractAddress} | Result: ${JSON.stringify(data, (_key, value) => (typeof value === \"bigint\" ? value.toString() : value))}`\n\t\t\t\t);\n\n\t\t\t\treturn {\n\t\t\t\t\tlogs: JSON.stringify([]),\n\t\t\t\t\thash: \"0x\",\n\t\t\t\t\tfunctionName: callInfo.functionName,\n\t\t\t\t\tparams: callInfo.params,\n\t\t\t\t\ttimestamp: Date.now().toString(),\n\t\t\t\t\tstatus: data !== null,\n\t\t\t\t\terror: \"\",\n\t\t\t\t\tresult: JSON.stringify(data, (_key, value) =>\n\t\t\t\t\t\ttypeof value === \"bigint\" ? value.toString() : value\n\t\t\t\t\t),\n\t\t\t\t\tcaller: callInfo.caller,\n\t\t\t\t\taddress: callInfo.contractAddress,\n\t\t\t\t} as FunctionCallResponse;\n\t\t\t}\n\n\t\t\tconst { request } = await this.publicClient.simulateContract({\n\t\t\t\taddress: callInfo.contractAddress as `0x${string}`,\n\t\t\t\tabi: callInfo.abi,\n\t\t\t\tfunctionName: callInfo.functionName,\n\t\t\t\targs: callInfo.params,\n\t\t\t\taccount: callInfo.msgSender as `0x${string}`,\n\t\t\t});\n\n\t\t\tconst hash = await walletClient.writeContract(request);\n\t\t\tconst transaction: TransactionReceipt = await this.publicClient.getTransactionReceipt({\n\t\t\t\thash,\n\t\t\t});\n\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Write call ${transaction.status}: ${callInfo.functionName}(${JSON.stringify(callInfo.params)}) -> ${callInfo.contractAddress} | Tx: ${hash} | Gas used: ${transaction.gasUsed.toString()} | Logs: ${transaction.logs.length}`\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tlogs: safeStringify(transaction.logs),\n\t\t\t\thash: hash,\n\t\t\t\tfunctionName: callInfo.functionName,\n\t\t\t\tparams: callInfo.params,\n\t\t\t\ttimestamp: Date.now().toString(),\n\t\t\t\tstatus: transaction.status === \"success\",\n\t\t\t\terror: \"\",\n\t\t\t\tresult: \"\",\n\t\t\t\taddress: callInfo.contractAddress,\n\t\t\t\tcaller: callInfo.caller,\n\t\t\t} as FunctionCallResponse;\n\t\t} catch (error) {\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Function call failed: ${callInfo.functionName}(${JSON.stringify(callInfo.params)}) -> ${callInfo.contractAddress} | Error: ${(error as Error).stack}`\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tlogs: JSON.stringify([]),\n\t\t\t\thash: \"\",\n\t\t\t\tfunctionName: callInfo.functionName,\n\t\t\t\tparams: callInfo.params,\n\t\t\t\ttimestamp: Date.now().toString(),\n\t\t\t\tstatus: false,\n\t\t\t\terror: `Unable to make contract call due to error: ${(error as Error).toString()}`,\n\t\t\t\tresult: \"\",\n\t\t\t\taddress: callInfo.contractAddress,\n\t\t\t\tcaller: callInfo.caller,\n\t\t\t} as FunctionCallResponse;\n\t\t}\n\t}\n\n\tasync isAnvilNode(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst result = await this.publicClient.request({\n\t\t\t\tmethod: \"anvil_nodeInfo\",\n\t\t\t\tparams: [],\n\t\t\t});\n\t\t\treturn !!result;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic async chainId(): Promise<string> {\n\t\treturn (await this.publicClient.getChainId()).toString();\n\t}\n\n\tpublic async deployContract(config: DeployContract): Promise<DeployedContract> {\n\t\ttry {\n\t\t\tconst chainId = await this.publicClient.getChainId();\n\t\t\tconst chain = this.createChain(config.nodeUrl, chainId);\n\t\t\tconst walletClient = createWalletClient({\n\t\t\t\tchain,\n\t\t\t\ttransport: http(config.nodeUrl),\n\t\t\t});\n\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Deploy started: ${config.contractName} | Args: ${JSON.stringify(config.constructorArgs)} | Deployer: ${config.msgSender}`\n\t\t\t);\n\n\t\t\t//@ts-ignore\n\t\t\tconst hash = await walletClient.deployContract({\n\t\t\t\tabi: config.abi,\n\t\t\t\taccount: config.msgSender as `0x${string}`,\n\t\t\t\targs: config.constructorArgs,\n\t\t\t\tbytecode: config.bytecode as `0x${string}`,\n\t\t\t\tchain,\n\t\t\t});\n\n\t\t\tconst receipt = await this.publicClient.waitForTransactionReceipt({\n\t\t\t\thash,\n\t\t\t});\n\n\t\t\tconst logs = await this.publicClient.getContractEvents({\n\t\t\t\tabi: config.abi,\n\t\t\t\taddress: receipt.contractAddress as `0x${string}`,\n\t\t\t\tfromBlock: \"earliest\",\n\t\t\t});\n\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Deploy ${receipt.status}: ${config.contractName} -> ${receipt.contractAddress} | Tx: ${hash} | Gas used: ${receipt.gasUsed.toString()} | Events: ${logs.length}`\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\thash,\n\t\t\t\taddress: receipt.contractAddress,\n\t\t\t\tsuccess: receipt.status === \"success\",\n\t\t\t\tnodeUrl: config.nodeUrl,\n\t\t\t\tcontractName: config.contractName,\n\t\t\t\tlogs: safeStringify(logs),\n\t\t\t} as DeployedContract;\n\t\t} catch (error) {\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Deploy failed: ${config.contractName} | Args: ${JSON.stringify(config.constructorArgs)} | Deployer: ${config.msgSender} | Error: ${(error as Error).stack}`\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\thash: \"\",\n\t\t\t\taddress: \"\",\n\t\t\t\tsuccess: false,\n\t\t\t\tnodeUrl: config.nodeUrl,\n\t\t\t\tcontractName: config.contractName,\n\t\t\t\tlogs: JSON.stringify([]),\n\t\t\t} as DeployedContract;\n\t\t}\n\t}\n\n\tpublic async getContractEvents(callInfo: FunctionCall): Promise<FunctionCallResponse> {\n\t\ttry {\n\t\t\tconst logs = await this.publicClient.getContractEvents({\n\t\t\t\taddress: callInfo.contractAddress as `0x${string}`,\n\t\t\t\tabi: callInfo.abi,\n\t\t\t\tfromBlock: \"earliest\",\n\t\t\t});\n\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Events retrieved: ${logs.length} events from ${callInfo.contractAddress} | Function: ${callInfo.functionName}`\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tlogs: safeStringify(logs),\n\t\t\t\thash: \"\",\n\t\t\t\tfunctionName: callInfo.functionName,\n\t\t\t\tparams: callInfo.params,\n\t\t\t\ttimestamp: Date.now().toString(),\n\t\t\t\tstatus: true,\n\t\t\t\terror: \"\",\n\t\t\t\tresult: \"\",\n\t\t\t\tcaller: callInfo.caller,\n\t\t\t\taddress: callInfo.contractAddress,\n\t\t\t} as FunctionCallResponse;\n\t\t} catch (error) {\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Events fetch failed: ${callInfo.contractAddress} | Function: ${callInfo.functionName} | Error: ${(error as Error).stack}`\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tlogs: JSON.stringify([]),\n\t\t\t\thash: \"\",\n\t\t\t\tfunctionName: callInfo.functionName,\n\t\t\t\tparams: callInfo.params,\n\t\t\t\ttimestamp: Date.now().toString(),\n\t\t\t\tstatus: false,\n\t\t\t\terror: `Unable to make contract call due to error: ${(error as Error).toString()}`,\n\t\t\t\tresult: \"\",\n\t\t\t\tcaller: callInfo.caller,\n\t\t\t\taddress: callInfo.contractAddress,\n\t\t\t} as FunctionCallResponse;\n\t\t}\n\t}\n\tpublic async transfer(info: TransferTransaction): Promise<TransferResponse> {\n\t\ttry {\n\t\t\tconst chainId = await this.publicClient.getChainId();\n\t\t\tconst walletClient = createWalletClient({\n\t\t\t\tchain: this.createChain(info.nodeUrl, chainId),\n\t\t\t\ttransport: http(info.nodeUrl),\n\t\t\t});\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Transferring ${info.amount} ETH to ${info.to as `0x${string}`} from ${info.from as `0x${string}`}`\n\t\t\t);\n\t\t\t//@ts-ignore\n\t\t\tconst hash = await walletClient.sendTransaction({\n\t\t\t\taccount: info.from as `0x${string}`,\n\t\t\t\tto: info.to as `0x${string}`,\n\t\t\t\tvalue: parseEther(info.amount.toString()),\n\t\t\t});\n\t\t\tconst [receipt, balanceFrom, balanceTo] = await Promise.all([\n\t\t\t\tthis.publicClient.waitForTransactionReceipt({\n\t\t\t\t\thash,\n\t\t\t\t}),\n\t\t\t\tthis.publicClient.getBalance({\n\t\t\t\t\taddress: info.from as `0x${string}`,\n\t\t\t\t}),\n\t\t\t\tthis.publicClient.getBalance({\n\t\t\t\t\taddress: info.to as `0x${string}`,\n\t\t\t\t}),\n\t\t\t]);\n\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Transferred ${info.amount} ETH to ${info.to as `0x${string}`} from ${info.from as `0x${string}`} transaction hash: ${hash} new balance From: ${formatEther(balanceFrom)} new balance To ${formatEther(balanceTo)}`\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tsuccess: receipt.status === \"success\",\n\t\t\t\thash: hash,\n\t\t\t\terror: receipt.status,\n\t\t\t} as TransferResponse;\n\t\t} catch (error) {\n\t\t\tconst err = error as Error;\n\t\t\tthis.logger.logToOutput(\n\t\t\t\t`Error Transferring ${info.amount} ETH to ${info.to as `0x${string}`} from ${info.from as `0x${string}`} error ${err.stack}`\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\thash: \"\",\n\t\t\t\terror: err.message,\n\t\t\t} as TransferResponse;\n\t\t}\n\t}\n}\n","import * as vscode from \"vscode\";\n\nexport class CockPitLogProvider {\n\tprivate outputChannel: vscode.OutputChannel;\n\tprivate buildStatusBar: vscode.StatusBarItem;\n\n\tconstructor() {\n\t\tthis.outputChannel = vscode.window.createOutputChannel(\"Forge Cockpit Logs\");\n\t\tthis.buildStatusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);\n\t\tthis.buildStatusBar.name = \"Forge cockpit Build Status\";\n\t\tthis.buildStatusBar.command = \"forge-cockpit.showBuildOutput\";\n\t\tthis.buildStatusBar.tooltip = \"Forge cockpit Build Status - Click to show output\";\n\t\tthis.buildStatusBar.hide();\n\t\tthis.showBuildOutput();\n\t}\n\tpublic showBuildOutput(): void {\n\t\tthis.outputChannel.show();\n\t}\n\n\tpublic logToOutput(message: string): void {\n\t\tconst timestamp = new Date().toLocaleTimeString();\n\t\tthis.outputChannel.appendLine(`[${timestamp}] Forge cockpit ${message}`);\n\t}\n\tpublic dispose(): void {\n\t\tif (this.outputChannel) {\n\t\t\tthis.outputChannel.dispose();\n\t\t}\n\t\tif (this.buildStatusBar) {\n\t\t\tthis.buildStatusBar.dispose();\n\t\t}\n\t}\n\tpublic updateStatusBar(message: string, theme?: vscode.ThemeColor): void {\n\t\tthis.buildStatusBar.hide();\n\t\tthis.buildStatusBar.text = message;\n\t\tthis.buildStatusBar.backgroundColor =\n\t\t\ttheme ?? new vscode.ThemeColor(\"statusBarItem.successBackground\");\n\t}\n}\n"],"mappings":"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","names":["vscode","path","vscode","vscode","vscode","vscode","path","vscode","config","execution","import_viem","env","_a","stdout","stderr","config","spawn","account","error","vscode","path","config","vscode","contracts","config","__getWebviewHtml__","vscode","vscode","vscode","vscode","path","import_viem","config","vscode","path","config","contract","context"]}